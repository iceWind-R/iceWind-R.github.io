<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thorine</title>
  
  <subtitle>凡是过往，皆为序章</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://icewind-r.github.io/"/>
  <updated>2020-11-30T04:51:41.134Z</updated>
  <id>http://icewind-r.github.io/</id>
  
  <author>
    <name>大雪初晴丶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习中断列表</title>
    <link href="http://icewind-r.github.io/2020/11/30/%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%96%AD%E5%88%97%E8%A1%A8/"/>
    <id>http://icewind-r.github.io/2020/11/30/%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%96%AD%E5%88%97%E8%A1%A8/</id>
    <published>2020-11-30T04:49:54.000Z</published>
    <updated>2020-11-30T04:51:41.134Z</updated>
    
    <content type="html"><![CDATA[<p>一些知识学习中断的记录，供日后学习。</p><a id="more"></a><hr><p>1、Docker学习中断，视频教程地址：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=20" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1og4y1q7M4?p=20</a> </p><p>2、Spring学习中断，<a href="https://www.bilibili.com/video/BV1nz4y1d7uy?p=46" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1nz4y1d7uy?p=46</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些知识学习中断的记录，供日后学习。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring_05</title>
    <link href="http://icewind-r.github.io/2020/11/30/Spring-05/"/>
    <id>http://icewind-r.github.io/2020/11/30/Spring-05/</id>
    <published>2020-11-30T04:40:45.000Z</published>
    <updated>2020-11-30T04:48:26.230Z</updated>
    
    <content type="html"><![CDATA[<p>Spring学习中断，<a href="https://www.bilibili.com/video/BV1nz4y1d7uy?p=46" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1nz4y1d7uy?p=46</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring学习中断，&lt;a href=&quot;https://www.bilibili.com/video/BV1nz4y1d7uy?p=46&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1nz
      
    
    </summary>
    
    
      <category term="Web" scheme="http://iceWind-R.github.io/categories/Web/"/>
    
    
      <category term="spring" scheme="http://iceWind-R.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker_05</title>
    <link href="http://icewind-r.github.io/2020/11/24/Docker-05/"/>
    <id>http://icewind-r.github.io/2020/11/24/Docker-05/</id>
    <published>2020-11-24T08:26:49.000Z</published>
    <updated>2020-11-24T08:30:38.809Z</updated>
    
    <content type="html"><![CDATA[<p>Docker学习中断，视频教程地址：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=20" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1og4y1q7M4?p=20</a> 还有上一篇文章的内容理解很浅，再次学习前需要加强巩固。</p><a id="more"></a> <hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker学习中断，视频教程地址：&lt;a href=&quot;https://www.bilibili.com/video/BV1og4y1q7M4?p=20&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1og4y1q7M4?p=20&lt;/a&gt; 还有上一篇文章的内容理解很浅，再次学习前需要加强巩固。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Docker" scheme="http://iceWind-R.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker_04</title>
    <link href="http://icewind-r.github.io/2020/11/24/Docker-04/"/>
    <id>http://icewind-r.github.io/2020/11/24/Docker-04/</id>
    <published>2020-11-24T02:08:25.000Z</published>
    <updated>2020-11-24T08:25:09.118Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 的 镜像讲解。</p><a id="more"></a> <hr><h1 id="镜像是什么？"><a href="#镜像是什么？" class="headerlink" title="镜像是什么？"></a>镜像是什么？</h1><p>镜像是一种轻量级、可执行的独立软件包，用来打包<strong>软件运行环境</strong>和<strong>基于运行环境开发的软件</strong>，它包含运行某个软件的所有内容，包括代码、运行时的库、环境变量 和 配置文件。</p><p>所有的应用，直接打包成docker镜像，就可以直接部署！</p><h2 id="如何得到镜像？"><a href="#如何得到镜像？" class="headerlink" title="如何得到镜像？"></a>如何得到镜像？</h2><ul><li>从远程镜像下载</li><li>从朋友拷贝</li><li>自己制作一个 DockerFile</li></ul><h1 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h1><h2 id="UnionFS（联合文件系统）"><a href="#UnionFS（联合文件系统）" class="headerlink" title="UnionFS（联合文件系统）"></a>UnionFS（联合文件系统）</h2><p>UnionFS (联合文件系统)：Union文件系统( UnionFS )是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtualfilesystem)。</p><p>Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性:一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h2 id="Docker镜像加载原理-1"><a href="#Docker镜像加载原理-1" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p><strong>bootfs(boot file system)</strong>主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的LinuxlUnix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><blockquote><p>系统启动需要引导加载，bootfs所负责的，这一层是几乎不变的，所有发行版的Linux系统可以共用的。</p></blockquote><p><strong>rootfs (root file system)</strong>，在bootfs之上。包含的就是典型Linux系统中的/dev, /proc,/bin, /letc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu ,Centos等等。</p><p>使用docker pull centos下载最新版本的Centos镜像也就200M左右，而我们平时下载一个原生的centos镜像都是4G，为什么差别这么大呢？对于 Docker 初学者都会有这个疑问。</p><p>下面来了解下Linux 操作系统由内核空间和用户空间组成，如下图所示：</p><img src="/2020/11/24/Docker-04/1.png" class><blockquote><p>可以看到 最底层是 bootfs，这层是linux 的内核，在这层之上的是rootfs，即提供linux 的标准目录文件等。</p></blockquote><h2 id="不同-Linux-发行版的区别主要就是-rootfs。"><a href="#不同-Linux-发行版的区别主要就是-rootfs。" class="headerlink" title="不同 Linux 发行版的区别主要就是 rootfs。"></a>不同 Linux 发行版的区别主要就是 rootfs。</h2><p>比如 Ubuntu 14.04 使用 upstart 管理服务，apt 管理软件包；而 CentOS 7 使用 systemd 和 yum。这些都是用户空间上的区别，Linux kernel 差别不大，即底层都是相同的bootfs。</p><p>所以 Docker 可以同时支持多种 Linux 镜像，模拟出多种操作系统环境。</p><img src="/2020/11/24/Docker-04/2.png" class><p>上图 Debian 和 BusyBox上层提供各自的 rootfs，底层共用 Docker <strong>Host 的 kernel</strong>。</p><blockquote><p>对于一个精简的OS , rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel。</p><p> 自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别,因此不同的发行版可以公用bootfs。</p></blockquote><h1 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h1><h2 id="分层的镜像"><a href="#分层的镜像" class="headerlink" title="分层的镜像"></a>分层的镜像</h2><p>我们 docker pull 的时候，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载。</p><img src="/2020/11/24/Docker-04/3.png" class><p><strong>思考</strong>：为什么Docker镜像要采用这种分层的结构呢?</p><p>最大的好处，就是资源共享了！</p><p>比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><blockquote><p>什么是base镜像？</p><ol><li>不依赖其他镜像，从 scratch 构建。</li><li>其他镜像可以使之作为基础进行扩展。</li></ol><p>base 镜像的通常都是各种 Linux 发行版的 Docker 镜像，比如 Ubuntu, Debian, CentOS 等。</p></blockquote><p>查看镜像分层的方式可以通过docker image inspect命令!</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker image inspect redis</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">"RootFS": &#123;</span><br><span class="line">            "Type": "layers",</span><br><span class="line">            "Layers": [</span><br><span class="line">                "sha256:f5600c6330da7bb112776ba067a32a9c20842d6ecc8ee3289f1a713b644092f8",</span><br><span class="line">                "sha256:c492b4fe510f674e04af29c5a8be4d0104a53e82e68ae98a3f9a0dd385263b7c",</span><br><span class="line">                "sha256:60f4b166131fd0c3b925a04e4976fbc43525e289e5edab72ffc4b7196085905f",</span><br><span class="line">                "sha256:4bc5e04ae88961aa002128a1873888ad4adf5ce11712d601fec6ad5f280c547d",</span><br><span class="line">                "sha256:06d5c35d63a8e4066ca996005b118a6051d2323c4af64c0fc2be014b4da7740e",</span><br><span class="line">                "sha256:d3fc9f08141a1377e718b8a29fd94a8c46793b88efdbed4ad02cbe3a3d91de10"   // 分层信息</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>理解：</strong></p><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层;如果在该镜像中添加Python包,就会在基础镜像层之上创建第二个镜像层;如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>该镜像当前已经包含3个镜像层，如下图所示(这只是一个用于演示的很简单的例子)。</p><img src="/2020/11/24/Docker-04/4.png" class><h2 id="为什么docker镜像要采用这种分层结构呢？"><a href="#为什么docker镜像要采用这种分层结构呢？" class="headerlink" title="为什么docker镜像要采用这种分层结构呢？"></a>为什么docker镜像要采用这种分层结构呢？</h2><p>最大的一个好处就是<strong>共享资源</strong>。</p><p>比如：有多个镜像都从相同的base镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><img src="/2020/11/24/Docker-04/5.png" class><h1 id="镜像的特点"><a href="#镜像的特点" class="headerlink" title="镜像的特点"></a>镜像的特点</h1><p>Docker镜像都是只读的。</p><p>当容器启动时，一个新的可写层被加载到镜像的顶部。</p><p>这一层通常被称作为”容器层”，“容器层”之下的都叫”镜像层”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 的 镜像讲解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Docker" scheme="http://iceWind-R.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker-03</title>
    <link href="http://icewind-r.github.io/2020/11/23/Docker-03/"/>
    <id>http://icewind-r.github.io/2020/11/23/Docker-03/</id>
    <published>2020-11-23T11:14:26.000Z</published>
    <updated>2020-11-24T07:27:23.073Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 的 实操练习。</p><a id="more"></a> <hr><h1 id="Docker-安装-Nginx"><a href="#Docker-安装-Nginx" class="headerlink" title="Docker 安装 Nginx"></a>Docker 安装 Nginx</h1><p>步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、搜索镜像 建议到docker hub上下载</span></span><br><span class="line">docker search nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、下载最新镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、启动镜像</span></span><br><span class="line">docker run -d --name nginx01 -p:3344:80 nginx </span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台方式启动 --name 不写默认nginx，若有多个，指定名字，例如nginx01 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p:宿主机端口:docker容器端口 : 指定宿主机和nginx容器的端口对应关系</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后一个是镜像名字</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功后，可通过下面命令验证，得到nginx的欢迎界面即为成功</span></span><br><span class="line">curl localhost:3344</span><br></pre></td></tr></table></figure><p>然后可以通过 ip:3344 访问，即可看到 nginx 欢迎界面。</p><p>关于 -p3344:80 端口暴露的概念</p><img src="/2020/11/23/Docker-03/1.png" class><p><strong>思考问题：</strong>我们每次改动 nginx 配置文件，都需要进入容器内部？十分的麻烦，我要是可以在容器外部提供一个映射路径，达到在容器修改文件名，容器内部就可以自动修改?</p><p>这里需要用到后期学习的<strong>数据卷</strong>的技术！</p><h1 id="Docker-安装-Tomcat"><a href="#Docker-安装-Tomcat" class="headerlink" title="Docker 安装 Tomcat"></a>Docker 安装 Tomcat</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方的使用,会自动启动tomcat服务</span></span><br><span class="line">docker run -it --rm tomcat # --rm 代表用完即删，一般用于测试</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们学习初期不使用以上方式，正常下载即可</span></span><br><span class="line">docker pull tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动镜像</span></span><br><span class="line">docker run -d -p:3355:8080 --name tomcat01 tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以上便可根据ip:3355访问，可以分为tomcat 但是404 not found</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器的目录结构</span></span><br><span class="line">root@e4cdba7e5c42:/usr/local/tomcat# ls -al</span><br><span class="line">total 128</span><br><span class="line">drwxr-xr-x. 1 root root    30 Nov 19 06:16 .</span><br><span class="line">drwxr-xr-x. 1 root root    20 Nov 19 06:12 ..</span><br><span class="line">-rw-r--r--. 1 root root 18982 Nov 12 15:41 BUILDING.txt</span><br><span class="line">-rw-r--r--. 1 root root  5409 Nov 12 15:41 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--. 1 root root 57092 Nov 12 15:41 LICENSE</span><br><span class="line">-rw-r--r--. 1 root root  2333 Nov 12 15:41 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3257 Nov 12 15:41 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6898 Nov 12 15:41 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16507 Nov 12 15:41 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov 19 06:16 bin</span><br><span class="line">drwxr-xr-x. 1 root root    22 Nov 23 11:43 conf</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov 19 06:16 lib</span><br><span class="line">drwxrwxrwx. 1 root root   177 Nov 23 11:43 logs</span><br><span class="line">drwxr-xr-x. 2 root root   134 Nov 19 06:16 native-jni-lib</span><br><span class="line">drwxrwxrwx. 2 root root    30 Nov 19 06:16 temp</span><br><span class="line">drwxr-xr-x. 2 root root     6 Nov 19 06:16 webapps</span><br><span class="line">drwxr-xr-x. 7 root root    81 Nov 12 15:38 webapps.dist</span><br><span class="line">drwxrwxrwx. 2 root root     6 Nov 12 15:35 work</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker exec -it tomcat01 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现问题，命令少了，webapps目录下没有内容，所以 404</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决:可以发现webapps.dist下有ROOT等文件，所以把webapps.dist里的内容复制进webapps下即可。</span></span><br><span class="line"></span><br><span class="line">cp -r webapps.dist/* webapps</span><br><span class="line"></span><br><span class="line">再次访问网页，成功。</span><br></pre></td></tr></table></figure><p><strong>思考问题：</strong>我们以后要部署项目，如果每次都要进入容器是不是十分麻烦？我要是可以在容器外部提供一个映射路径，webapps ,我们在外部放置项目，就自动同步到内部就好了!</p><h1 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line">docker run -p 3306:3306 --name mysql01 -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure><p>此时，docker容器里的mysql服务启动，并且映射到宿主机的3306端口，可通过宿主机的ip:3306访问mysql服务。</p><h1 id="Docker安装SQL-server（失败！！）"><a href="#Docker安装SQL-server（失败！！）" class="headerlink" title="Docker安装SQL server（失败！！）"></a>Docker安装SQL server（失败！！）</h1><p>使用命令下载镜像：docker pull mcr.microsoft.com/mssql/server:2017-latest</p><p>使用命令创建并运行SQL server容器，密码root，容器名字sqlserver1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=root"  -p 1433:1433 --name sqlserver1  -d mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure><h1 id="Docker安装Oracle（失败）"><a href="#Docker安装Oracle（失败）" class="headerlink" title="Docker安装Oracle（失败）"></a>Docker安装Oracle（失败）</h1><p>使用命令下载镜像 docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</p><p><strong>没有足够空间下载</strong></p><h1 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h1><p>使用命令docker pull redis 下载镜像</p><p>运行redis容器：docker run -itd –name redis01 -p 6379:6379 redis</p><p>使用命令行交互模式进入容器：docker exec -it redis01 /bin/bash </p><p>然后用redis-cli连接容器的redis进行测试</p><p>set test 1</p><h1 id="Docker安装MongoDB"><a href="#Docker安装MongoDB" class="headerlink" title="Docker安装MongoDB"></a>Docker安装MongoDB</h1><h1 id="Docker-部署-ES-Kibana"><a href="#Docker-部署-ES-Kibana" class="headerlink" title="Docker 部署 ES + Kibana"></a>Docker 部署 ES + Kibana</h1><p>es是elasticsearch6搜索引擎，kibana是它的可视化操作界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ES 暴露的端口很多！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ES 十分的耗内存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ES 的数据一般需要放置到安全目录！挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --net somenetwork ? 网络配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 es</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.9.3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看CPU状态： docker stats </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 非常耗内存，占了大部分内存空间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试es是否启动成功</span></span><br><span class="line">curl localhost:9200</span><br></pre></td></tr></table></figure><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><p>1、portainer（先用这个）： Docker图形化管理工具！提供一个后台面板供我们操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用命令</span></span><br><span class="line">docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true --name portainer01 portainer/portainer</span><br></pre></td></tr></table></figure><p>访问测试：ip:8088</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 的 实操练习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Docker" scheme="http://iceWind-R.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker_02</title>
    <link href="http://icewind-r.github.io/2020/11/22/Docker-02/"/>
    <id>http://icewind-r.github.io/2020/11/22/Docker-02/</id>
    <published>2020-11-22T10:09:06.000Z</published>
    <updated>2020-11-23T11:14:42.307Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 的常用命令合集。</p><a id="more"></a> <hr><h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><p>官方给出的概览图，很生动形象，学完下面命令后再看此图很有帮助。</p><img src="/2020/11/22/Docker-02/1.png" class><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version # 显示docker的版本信息</span><br><span class="line">docker info# 显示docker的系统信息，包括镜像容器的数量</span><br><span class="line">docker 命令 -help # 帮助命令</span><br></pre></td></tr></table></figure><p>还可以查看官方的命令 <a href="https://docs.docker.com/reference/" target="_blank" rel="noopener">帮助文档</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong>：查看所有本地主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen /]# docker imagesREPOSITORY</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        10 months ago       13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">    REPOSITORY镜像的仓库源</span><br><span class="line">    TAG镜像的标签</span><br><span class="line">    IMAGE ID镜像的id</span><br><span class="line">    CREATED镜像的创建时间</span><br><span class="line">    SIZE镜像的大小</span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">    -a, --a71#列出所有镜像</span><br><span class="line">    -q, --quiet#只显示镜像的id</span><br></pre></td></tr></table></figure><p><strong>docker search (镜像名字)</strong>：搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@localhost ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               </span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10196               [OK]   </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3753                [OK]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项 通过过滤来搜索</span></span><br><span class="line">--filter=STARS=3000 # 搜索镜像的STARS数大于3000的</span><br></pre></td></tr></table></figure><p><strong>docker pull</strong>：下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@localhost ~] # docker pull mysql</span><br><span class="line">Using default tag: latest # 如果不写 tag，默认是 latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Pull complete  # 分层下载，docker image的核心 联合文件下载</span><br><span class="line">29969ddb0ffb: Pull complete </span><br><span class="line">a43f41a44c48: Pull complete </span><br><span class="line">5cdd802543a3: Pull complete </span><br><span class="line">b79b040de953: Pull complete </span><br><span class="line">938c64119969: Pull complete </span><br><span class="line">7689ec51a0d9: Pull complete </span><br><span class="line">a880ba7c411f: Pull complete </span><br><span class="line">984f656ec6ca: Pull complete</span><br><span class="line">9f497bce458a: Pull complete</span><br><span class="line">b9940f97694b: Pull complete</span><br><span class="line">2f069358dc96: Pull complete</span><br><span class="line">Digest: sha256:4bb2e81a40e9d0d59bd8e3dc2ba5e1f2197696f6de39a91e90798dd27299b093 # 唯一签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latestdocker.io/library/mysql:latest# 真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下两个命令相互等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载，可在docker hub上查阅版本信息</span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>docker rmi</strong>：删除镜像（rm image） </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像id # 删除指定id的镜像</span><br><span class="line">docker rmi -f 镜像id 镜像id ... # 删除多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq) # 删除全部镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>说明：我们有了镜像才可以创建容器，linux，下载一个 centos 镜像来测试学习</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image(镜像名字)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name="Name" # 容器名字 tomcat1 tomcat2,用来区分容器</span><br><span class="line">-d   # 后台方式运行</span><br><span class="line">-it  # 使用交互方式运行，进入容器查看内容</span><br><span class="line">-p  # 指定容器的端口</span><br><span class="line">-p 主机端口:容器端口（常用）</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P  # 随机指定端口</span><br></pre></td></tr></table></figure><p><strong>退出当前容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit# 停止容器并退出</span><br><span class="line"></span><br><span class="line">快捷键:Ctrl + P + Q  # 容器不停止并退出</span><br></pre></td></tr></table></figure><p>测试：启动并进入容器centos</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@1a52b837b77a /]# ls # 查看容器内的centos，基础版本，很多命令不完善</span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出当前容器</span></span><br><span class="line">[root@1a52b837b77a /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p><strong>列出所有运行容器</strong></p><p>docker ps 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps # 列出当前正在运行的容器 （exit退出容器，容器不再运行）</span><br><span class="line">  参数:</span><br><span class="line">-a # 列出 当前正在运行的容器 + 历史运行过的容器</span><br><span class="line">-n=? # 显示最近创建的容器个数 </span><br><span class="line">-q # 只显示容器的编号</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id# 删除指定id的容器，不能删除正在运行的容器</span><br><span class="line">docker rm -f $(docker ps -aq) # 删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id# 启动容器</span><br><span class="line">docker restart 容器id# 重启容器</span><br><span class="line">docker stop 容器id# 停止当前正在运行的容器</span><br><span class="line">docker ki11 容器id# 强制停止当前容器</span><br></pre></td></tr></table></figure><h2 id="常用其他重要命令"><a href="#常用其他重要命令" class="headerlink" title="常用其他重要命令"></a>常用其他重要命令</h2><p>以上命令是玩 docker 的基本命令，但这还远远不够。</p><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><p>命令 : <code>docker run -d 镜像名</code></p><p><strong>问题</strong>：启动后，docker ps 发现该容器被自动停掉。</p><p>原因：docker容器使用后台运行，就必须要有要一个<strong>前台进程</strong>，docker发现没有应用，就会自动停止</p><p>​            安装nginx镜像，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>命令：<code>docker logs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自己编写一段shell脚本</span></span><br><span class="line">docker run -d centos /bin/bash -c "while true;do echo dongao;sleep 1;done"</span><br><span class="line"></span><br><span class="line">docker ps  # 查看创建的正在运行的容器</span><br><span class="line">CONTAINER ID        IMAGE </span><br><span class="line">6e703303ac9a        centos</span><br><span class="line"></span><br><span class="line">docker logs -tf --tail 10 6e703303ac9a # 查看该id的前10条日志</span><br></pre></td></tr></table></figure><h3 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h3><p>命令 <code>docker top 容器id</code></p><h3 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h3><p>命令 <code>docker inspect 容器id</code></p><p>包含非常多的容器的基本信息，很多信息值得探讨，在以后学习中会提及到。</p><h3 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h3><p>我们通常容器都是使用后台方式运行，我们需要进入容器，修改一些配置</p><p><strong>方式一</strong>：命令 <code>docker exec -it</code> 容器id bashShell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">6e703303ac9a        centos              "/bin/bash -c 'while…"   17 minutes ago      Up 17 minutes                           condescending_vaughan</span><br><span class="line">[root@localhost ~]# docker exec -it 6e703303ac9a /bin/bash</span><br><span class="line">[root@6e703303ac9a /]# ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 07:11 ?        00:00:00 /bin/bash -c while true;do echo dongao;sleep 1;done</span><br><span class="line">root       1086      0  0 07:29 pts/0    00:00:00 /bin/bash</span><br><span class="line">root       1110      1  0 07:29 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root       1111   1086  0 07:29 pts/0    00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p><strong>方式二</strong>：<code>docker attach 容器id</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker attach 6e703303ac9a</span><br><span class="line">正在执行当前的代码...</span><br></pre></td></tr></table></figure><p><strong><code>docker exec</code> 和 <code>docker attach</code> 的 区别</strong></p><p>docker exec：进入容器并开启一个新的终端，可以在里面操作（常用）</p><p>docker attach：进入容器正在执行的终端，不会启动新的进程。</p><h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><p>命令 ：<code>docker cp 容器id:容器内路径 主机的目的路径</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker cp d737d4129453:/home/dongao.java /home</span><br></pre></td></tr></table></figure><h1 id="所有命令（查阅）"><a href="#所有命令（查阅）" class="headerlink" title="所有命令（查阅）"></a>所有命令（查阅）</h1><img src="/2020/11/22/Docker-02/2.png" class><img src="/2020/11/22/Docker-02/3.png" class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 的常用命令合集。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Docker" scheme="http://iceWind-R.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Spring_04</title>
    <link href="http://icewind-r.github.io/2020/11/16/Spring-04/"/>
    <id>http://icewind-r.github.io/2020/11/16/Spring-04/</id>
    <published>2020-11-16T12:26:07.000Z</published>
    <updated>2020-11-30T04:47:35.696Z</updated>
    
    <content type="html"><![CDATA[<p>本节介绍spring 的AOP——面向切片编程。</p><a id="more"></a><hr><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>动态代理是指，程序在整个运行过程中根本就不存在目标类的代理类，目标对象的代理对象只是由代理生成工具(不是真实定义的类）在程序运行时由VM根据反射等机制动态生成的。代理对象与目标对象的代理关系在程序运行时才确立。</p><p>简单来说，就是给原来的类增加一些功能，即<strong>功能增强</strong>。</p><h2 id="JDK的动态代理"><a href="#JDK的动态代理" class="headerlink" title="JDK的动态代理"></a>JDK的动态代理</h2><p>动态代理的实现方式常用的有两种:使用JDK的 Proxy，与通过CGLIB生成代理。</p><p>Jdk的动态要求<strong>目标对象必须实现接口</strong>，这是java设计上的要求。</p><p>从jdk1.3以来，java语言通过java.lang.reflect包提供三个类支持代理模式 Proxy，Method 和 InovcationHandler 。</p><p>动态代理的作用:</p><p>1) 在目标类源代码不改变的情况下，增加功能。</p><p>2) 减少代码的重复</p><p>3) 专注业务逻辑代码</p><p>4) 解耦合，让你的业务功能和日志，事务非业务功能分离。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>现有 SomeService 接口和它的实现类 SomeServiceImpl，要求使用动态代理，不改变SomeServiceImpl的源码，给类中的doSome 和 doOther() 类添加 时间 和 事务完成代码。具体代码如下</p><p>SomeService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SomeServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thorine.service.SomeService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ServiceTools.doLog(); // 动态代理就是实现注释里的代码的</span></span><br><span class="line">        System.out.println(<span class="string">"执行doSome()..."</span>);</span><br><span class="line">        <span class="comment">//ServiceTools.doTrans();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ServiceTools.doLog();</span></span><br><span class="line">        System.out.println(<span class="string">"执行doOther()..."</span>);</span><br><span class="line">        <span class="comment">//ServiceTools.doTrans();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyInvocationHandler（代理类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thorine.util.ServiceTools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target; <span class="comment">// SomeServiceImpl类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了MyInvocationHandler的invoke方法"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Method方法名："</span> + method.getName());</span><br><span class="line"></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ServiceTools.doLog(); <span class="comment">// 方法增强</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行目标类的方法，通过Method类实现，通过代理对象执行方法时，会调用这个invoke()</span></span><br><span class="line">        result = method.invoke(target, args); <span class="comment">// SomeServiceImpl.doOther,doSome()</span></span><br><span class="line"></span><br><span class="line">        ServiceTools.doTrans(); <span class="comment">// 方法增强</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 目标方法执行的结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thorine.handler.MyInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> com.thorine.service.impl.SomeServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用JDK 的proxy创建代理对象</span></span><br><span class="line">        <span class="comment">// 创建目标对象</span></span><br><span class="line">        SomeService target = <span class="keyword">new</span> SomeServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建InvocationHandler对象</span></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(target);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用proxy创建代理</span></span><br><span class="line">        SomeService proxy = (SomeService) Proxy.newProxyInstance</span><br><span class="line">                (target.getClass().getClassLoader(), target.getClass().getInterfaces(),handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理执行方法，会调用handler中的invoke()</span></span><br><span class="line">        proxy.doSome();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h1><p>AOP (Aspect Orient Programming)，面向切面编程。面向切面编程是从动态角度考虑程序运行过程。</p><p>AOP底层，就是采用<strong>动态代理模式</strong>实现的。采用了两种代理 : JDK的动态代理，与CGLIB的动态代理。</p><blockquote><p>AOP为Aspect Oriented Programming的缩写，意为 : 面向切面编程，可通过运行期动态代理实现程序功能的统一维护的一种技术。AOP是Spring框架中的一个重要内容。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><p>因为动态代理很灵活，实现方法复杂多样，为了统一规则，而出现的AOP。</p><p>总之，AOP就是动态代理的规范化。</p><h2 id="Aspect：切面"><a href="#Aspect：切面" class="headerlink" title="Aspect：切面"></a>Aspect：切面</h2><p>给目标类增加的功能，就是切面。像上面用的增加日志、事务功能 等都是切面。</p><p><strong>特点：</strong>一般都是非业务方法，可以独立使用。</p><blockquote><p>业务方法：功能性的方法代码等。例如：数据库增删改查，逻辑运算（10+20）等。</p></blockquote><h2 id="怎么理解面向切面编程？"><a href="#怎么理解面向切面编程？" class="headerlink" title="怎么理解面向切面编程？"></a>怎么理解面向切面编程？</h2><h1 id="面向切片编程有什么好处？"><a href="#面向切片编程有什么好处？" class="headerlink" title="面向切片编程有什么好处？"></a>面向切片编程有什么好处？</h1><h1 id="AOP编程术语"><a href="#AOP编程术语" class="headerlink" title="AOP编程术语"></a>AOP编程术语</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节介绍spring 的AOP——面向切片编程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://iceWind-R.github.io/categories/Web/"/>
    
    
      <category term="spring" scheme="http://iceWind-R.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow_01</title>
    <link href="http://icewind-r.github.io/2020/11/15/Tensorflow-01/"/>
    <id>http://icewind-r.github.io/2020/11/15/Tensorflow-01/</id>
    <published>2020-11-15T08:11:21.000Z</published>
    <updated>2020-11-15T08:22:20.973Z</updated>
    
    <content type="html"><![CDATA[<p>tensorflow 的入门安装。</p><a id="more"></a><hr><h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>1、安装tensorflow是基于Python的，并且需要从Anaconda仓库中下载。</p><p>2、所以我们的步骤是：先下载Anaconda，再在Anaconda中安装一个Python，(你的电脑里可能本来已经装了一个Python环境，但是Anaconda中的Python是必须再装的)，然后再下载安装tensorflow。</p><p>3、因为anaconda支持的python版本与TensorFlow支持的python版本不一致可能会导致安装出错，因此下载时候一定不能下载最新版本的anaconda，要先查询下tensorflow支持python哪个版本再下。</p><p>4、tensorflow 目前支持Python 2.7和3.5版本。</p><p>5、作者安装时用清华的镜像一直没能成功，知道使用豆瓣镜像才顺利完成。</p><h1 id="一、Anaconda3-的安装"><a href="#一、Anaconda3-的安装" class="headerlink" title="一、Anaconda3 的安装"></a>一、Anaconda3 的安装</h1><p>Anaconda3-4.0.0 下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.0.0-Windows-x86_64.exe" target="_blank" rel="noopener">Anaconda3-4.0.0-Windows-x86_64.exe</a></p><p>默认安装，路径自选</p><h1 id="二、安装python3-5-虚拟环境"><a href="#二、安装python3-5-虚拟环境" class="headerlink" title="二、安装python3.5 虚拟环境"></a>二、安装python3.5 虚拟环境</h1><p>打开Anaconda Promote。</p><img src="/2020/11/15/Tensorflow-01/2.png" class><p>输入命令 ： <code>conda create --name tensorflow python=3.5</code></p><p>即代表创建在Anaconda中创建一个名为tensorflow的虚拟环境，并指定pyhton版本为 3.5.x</p><img src="/2020/11/15/Tensorflow-01/1.png" class><p> 完成后根据提示 <code>activate tensorflow</code>，进入 tensorflow 的虚拟环境即可。</p><p>然后可以使用命令 <code>python -m pip install --upgrade pip</code>  ，更新一下pip命令</p><h1 id="三、安装tensorflow"><a href="#三、安装tensorflow" class="headerlink" title="三、安装tensorflow"></a>三、安装tensorflow</h1><p>在上述激活的tensorflow的虚拟环境中，输入命令如下：</p><p><code>pip install tensorflow==2.0.0 -i https://pypi.doubanio.com/simple</code></p><p>等待没有报红，然后下载成功。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>输入python进入python交互模式，输入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure><p>得到结果如下</p><img src="/2020/11/15/Tensorflow-01/3.png" class><p>完成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tensorflow 的入门安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://iceWind-R.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tensorflow" scheme="http://iceWind-R.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Spring_03</title>
    <link href="http://icewind-r.github.io/2020/11/14/Spring-03/"/>
    <id>http://icewind-r.github.io/2020/11/14/Spring-03/</id>
    <published>2020-11-14T09:38:35.000Z</published>
    <updated>2020-11-16T12:25:05.924Z</updated>
    
    <content type="html"><![CDATA[<p>基于上篇总结的第一种基于XML的DI，本篇总结DI的第二种，也是更为常见和应用更为广泛的基于<strong>注解</strong>的DI。</p><hr><a id="more"></a><h1 id="基于注解的DI"><a href="#基于注解的DI" class="headerlink" title="基于注解的DI"></a>基于注解的DI</h1><p>对于使用注解的 DI 操作，将不再需要在 spring 配置文件中声明bean实例。spring中使用注解，需要在原有spring运行环境基础上再做一些改变。</p><p>需要在spring配置文件中配置组件扫描器，用于在指定的基本包中扫描注解。</p><p>使用注解的<strong>步骤</strong>:<br>1.加入maven的依赖spring-context ，在你加入spring-context的同时，间接加入spring-aop的依赖。使用注解必须使用spring-aop依赖</p><p>2.在类中加入spring的注解（多个不同功能的注解）</p><p>3.在spring的配置文件中，加入一个组件扫描器的标签，说明注解在你的项目中的位置</p><p><strong>学习的注解</strong>:</p><ol><li><p>@Component</p></li><li><p>@Repository</p></li><li><p>@Service</p></li><li><p>@Controller</p></li><li><p>@Value</p></li><li><p>@Autowired</p></li><li><p>@Resource</p></li></ol><h2 id="定义Bean的注解-Component"><a href="#定义Bean的注解-Component" class="headerlink" title="定义Bean的注解 @Component"></a>定义Bean的注解 @Component</h2><p>需要在类上使用注解 @Component，该注解的value属性用于指定该bean 的id值。</p><p>Student类文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.ba01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @component:创建对象,等同于&lt;bean&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">*   属性: value 就是对象的名称，也就是bean的id值，值是唯一的，创建的对象整个spring容器只有一个</span></span><br><span class="line"><span class="comment">*   位置：在类的上面</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*       spring中和@component功能一致，创建对象的注解还有:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.@Repository (用在持久层类的上面):放在dao的实现类上面，</span></span><br><span class="line"><span class="comment">        表示创建dao对象，dao对象是能访问数据库的。</span></span><br><span class="line"><span class="comment">        2.@Service(用在业务层类的上面):放在service的实现类上面，</span></span><br><span class="line"><span class="comment">        创建service对象,service对象是做业务处理，可以有事务等功能的。</span></span><br><span class="line"><span class="comment">        3.@Controller(用在控制器的上面):放在控制器（处理器）类的上面，创建控制器对象的</span></span><br><span class="line"><span class="comment">        控制器对象,能够接受用户提交的参数，显示请求的处理结果。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        以上三个注解的使用语法和@Component一样的。都能创建对象，但是这三个注解还有额外的功能。</span></span><br><span class="line"><span class="comment">        @Repository , @Service , @controller是给项目的对象分层的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        只要不创建属于以上三个的种类的类对象，就使用 @Component</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @Component(value = "myStudent") 正规用法</span></span><br><span class="line"><span class="comment">// @Component("myStudent") 省略 value 用法</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 则会创建由 spring 默认指定名称的对象，即 student</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student 无参构造方法执行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        声明组件扫描器(component-scan),组件就是java对象</span></span><br><span class="line"><span class="comment">        base-package:指定注解在你的项目中的包名</span></span><br><span class="line"><span class="comment">        component-scan工作方式: spring会扫描逼历base-package指定的包，</span></span><br><span class="line"><span class="comment">        把 包中和子包中 的所有类,找到类中的注解,按照注解的功能创建对象，或给属性赋值。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.thorine.ba01"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定多个包的三种方式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种：使用多次组件扫描器，每个指定一个包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.thorine.ba01"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.thorine.ba02"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第二种: 使用分隔符(; 或 ,) 分隔多个包名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.thorine.ba01;com.thorine.ba02"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第三种:指定父包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.thorine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/11/14/Spring-03/1.png" class><h2 id="简单类型属性注入-Value"><a href="#简单类型属性注入-Value" class="headerlink" title="简单类型属性注入@Value"></a>简单类型属性注入@Value</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.ba02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"myStudent"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Value:简单类型的属性赋值</span></span><br><span class="line"><span class="comment">    * 属性：value 是 String 类型的，表示简单类型的属性值</span></span><br><span class="line"><span class="comment">    * 位置：</span></span><br><span class="line"><span class="comment">    *       1、在属性定义的上面，无需set方法，推荐使用。</span></span><br><span class="line"><span class="comment">    *       2、在set方法上</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"张飞"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"29"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student 无参构造..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动注入-Autowired"><a href="#自动注入-Autowired" class="headerlink" title="自动注入@Autowired"></a>自动注入@Autowired</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.ba03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"myStudent"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Value:简单类型的属性赋值</span></span><br><span class="line"><span class="comment">    * 属性：value 是 String 类型的，表示简单类型的属性值</span></span><br><span class="line"><span class="comment">    * 位置：</span></span><br><span class="line"><span class="comment">    *       1、在属性定义的上面，无需set方法，推荐使用。</span></span><br><span class="line"><span class="comment">    *       2、在set方法上</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"张飞"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"29"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Autowired</span>: 实现引用类型的赋值，是自动注入的原理，支持byName,byType</span></span><br><span class="line"><span class="comment">     * 默认使用byType自动注入</span></span><br><span class="line"><span class="comment">     * 位置：属性定义的上面，无需使用set方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 属性：required，是一个Boolean类型，默认为 true，表示若引用类型赋值失败，则报错并中止程序运行</span></span><br><span class="line"><span class="comment">     * 若是false，则程序正常执行，引用类型赋值为 null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果要使用byName方式，则在属性上面加 <span class="doctag">@Autowired</span> 和 <span class="doctag">@Qualified</span>(value="bean的id"): 表示使用指定名称的bean赋值</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>) <span class="comment">// required属性推荐使用默认，即 true</span></span><br><span class="line">    <span class="comment">// @Qualifier("mySchool") 打开注释则代表byName</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student 无参构造..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", school="</span> + school +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK注解-Resource-自动注入"><a href="#JDK注解-Resource-自动注入" class="headerlink" title="JDK注解@Resource 自动注入"></a>JDK注解@Resource 自动注入</h2><p>spring提供了对jdk中@Resource注解的支持。@Resource注解既可以按名称匹配Bean，也可以按类型匹配Bean，<strong>默认是按名称注入</strong>。@Resource可在属性上，可在set方法上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Resource</span>: 来自jdk的注解，spring对其提供了支持，也是自动注入的原理，默认byName</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Resource  默认byName,如果byName找不到,byType</span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"school"</span>) <span class="comment">// 只使用byName</span></span><br><span class="line"><span class="keyword">private</span> School school;</span><br></pre></td></tr></table></figure><h2 id="注解与XML的对比"><a href="#注解与XML的对比" class="headerlink" title="注解与XML的对比"></a>注解与XML的对比</h2><p>需要经常改变值用xml，不需要或不经常改变值的用注解。</p><p>注解更直观方便，查看类代码就能知道该类对象的信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于上篇总结的第一种基于XML的DI，本篇总结DI的第二种，也是更为常见和应用更为广泛的基于&lt;strong&gt;注解&lt;/strong&gt;的DI。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://iceWind-R.github.io/categories/Web/"/>
    
    
      <category term="spring" scheme="http://iceWind-R.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring_02</title>
    <link href="http://icewind-r.github.io/2020/11/10/Spring-02/"/>
    <id>http://icewind-r.github.io/2020/11/10/Spring-02/</id>
    <published>2020-11-10T09:07:52.000Z</published>
    <updated>2020-11-15T08:14:45.488Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇spring入门案例，本篇文章讲解如何给对象赋值，即DI操作。本篇总结第一种基于XML的DI。</p><a id="more"></a><hr><p>给对象赋值有两种方式，基于XML的DI和基于注解的DI。</p><p>di的实现有两种:</p><ol><li>在spring的配置文件中，使用标签和属性完成，叫做基于XML的di实现</li><li>使用spring中的注解，完成属性赋值，叫做基于注解的di实现</li></ol><p>di的语法分类:</p><ol><li><strong>set注入</strong>（设置注入） : spring调用类的set方法，在set方法可以实现属性的赋值。<br>80左右都是使用的set注入</li><li><strong>构造注入</strong>：spring调用类的有参数构造方法，创建对象。在构造方法中完成赋值。</li></ol><p>我们需要重点掌握后者。</p><h1 id="基于XML的DI"><a href="#基于XML的DI" class="headerlink" title="基于XML的DI"></a>基于XML的DI</h1><h2 id="1、注入分类"><a href="#1、注入分类" class="headerlink" title="1、注入分类"></a>1、注入分类</h2><h3 id="set注入（掌握）"><a href="#set注入（掌握）" class="headerlink" title="set注入（掌握）"></a>set注入（掌握）</h3><h4 id="A、简单类型"><a href="#A、简单类型" class="headerlink" title="A、简单类型"></a>A、简单类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">"setName():"</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"setAge():"</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        简单类型：spring中规定java的基本数据类型和string都是简单类型</span></span><br><span class="line"><span class="comment">        DI，注入：就是赋值的意思</span></span><br><span class="line"><span class="comment">        di：给属性赋值</span></span><br><span class="line"><span class="comment">            1、set注入（设置注入）：spring调用类的set方法，你可以在set方法中完成属性赋值</span></span><br><span class="line"><span class="comment">                1) 简单类型注入</span></span><br><span class="line"><span class="comment">                    &lt;bean id="xx" class="yy"&gt;</span></span><br><span class="line"><span class="comment">                        &lt;property name="属性名字" value="此属性的值" /&gt;</span></span><br><span class="line"><span class="comment">                        一个property只能给一个属性赋值，若赋值多个语句，多个property</span></span><br><span class="line"><span class="comment">                    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba01.Student"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span> /&gt;</span> <span class="comment">&lt;!--调用了setName("zhangsan")--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span> <span class="comment">&lt;!--调用了setAge("zhangsan")--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：使用上述set注入，Student类中必须有set方法，没有则会报错--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样配置之后，应用上篇文章的创建对象方法，创建的Student对象便会带有配置文件中指定的属性。</p><h4 id="B、引用类型"><a href="#B、引用类型" class="headerlink" title="B、引用类型"></a>B、引用类型</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            2、引用类型的set注入：spring调用类的set方法</span></span><br><span class="line"><span class="comment">            &lt;bean&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="属性名字" ref="bean的id(对象的名称)" /&gt;</span></span><br><span class="line"><span class="comment">            &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba02.Student"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">ref</span>=<span class="string">"mySchool"</span> /&gt;</span> <span class="comment">&lt;!--调用setSchool()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySchool"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba02.School"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"北京大学"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"北京"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在Student的类中有一个属性 private School school；School是自定义的一个类，有name 和 address属性。</p></blockquote><h3 id="构造注入（理解）"><a href="#构造注入（理解）" class="headerlink" title="构造注入（理解）"></a>构造注入（理解）</h3><p>构造注入是指，在构造调用者实例的同时，完成被调用者的实例化。即，使用构造器设置依赖关系。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        构造注入：spring 调用类有参数构造方法，在创建对象的同时，在构造方法中给属性赋值</span></span><br><span class="line"><span class="comment">        构造注入使用标签：&lt;constructor-arg&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">        一个 &lt;constructor-arg&gt; 标签表示构造方法的一个属性</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg&gt; 标签属性：</span></span><br><span class="line"><span class="comment">            name:构造方法的形参名</span></span><br><span class="line"><span class="comment">            index:构造方法参数的位置, 0,1,2...</span></span><br><span class="line"><span class="comment">            value:形参类型是简单类型的</span></span><br><span class="line"><span class="comment">            ref:形参类型是引用类型的</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba03.Student"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"15"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">ref</span>=<span class="string">"mySchool"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用index属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent2"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba03.Student"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"李四"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"25"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">ref</span>=<span class="string">"mySchool"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySchool"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba03.School"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"北京大学"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"北京"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>必须在被创建对象的Student类中添加有参构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, School school)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"============Student类有参数构造方法============="</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.school = school;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用构造注入时，所有的形参都要进行赋值，set注入则可以留空。</p></blockquote><h2 id="2、引用类型的自动注入"><a href="#2、引用类型的自动注入" class="headerlink" title="2、引用类型的自动注入"></a>2、引用类型的自动注入</h2><p>对于引用类型属性的注入，也可不在配置文件中显示的注入。可以通过为&lt;bean/&gt;标签设置autowire属性值，为引用类型属性进行隐式自动注入（默认是不自动注入引用类型属性）。根据注入判断标准不同，可以分为以下两种：</p><ul><li>byName：根据名称自动注入</li><li>byType：根据类型自动注入</li></ul><h3 id="（1）byName方式自动注入"><a href="#（1）byName方式自动注入" class="headerlink" title="（1）byName方式自动注入"></a>（1）byName方式自动注入</h3><img src="/2020/11/10/Spring-02/2.png" class><h3 id="（2）byType方式自动注入"><a href="#（2）byType方式自动注入" class="headerlink" title="（2）byType方式自动注入"></a>（2）byType方式自动注入</h3><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        引用类型的自动注入：spring 框架根据某些规则可以给引用类型赋值。</span></span><br><span class="line"><span class="comment">        使用的规则常用的是byName, byType.</span></span><br><span class="line"><span class="comment">        1.byName(按名称注入): java 类中引用类型的属性名和spring容器中(配置文件)&lt;bean&gt; 的id名称一样，</span></span><br><span class="line"><span class="comment">                             且数据类型是一致的这样容器中的bean，spring能够赋值给引用类型。</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">        &lt;bean id="xx" class="com.xx..."&gt;</span></span><br><span class="line"><span class="comment">            简单类型属性赋值</span></span><br><span class="line"><span class="comment">        &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.byType(按类型注入): java 类中引用类型的数据类型和spring容器中（配置文件）&lt;bean&gt; 的class属性</span></span><br><span class="line"><span class="comment">                             是同源关系的，这样的bean能够赋值给引用类型</span></span><br><span class="line"><span class="comment">                   同源就是一类的意思：</span></span><br><span class="line"><span class="comment">                   1、Java类中引用类型的数据类型和bean的class值是一样的</span></span><br><span class="line"><span class="comment">                   2、Java类中引用类型的数据类型和bean的class值是父子关系的</span></span><br><span class="line"><span class="comment">                   3、Java类中引用类型的数据类型和bean的class值是接口和实现类关系的</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">        &lt;bean id="xx" class="com.xx..."&gt;</span></span><br><span class="line"><span class="comment">            简单类型属性赋值</span></span><br><span class="line"><span class="comment">        &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--byName or byType--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba04.Student"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySchool"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba04.School"</span>&gt;</span> <span class="comment">&lt;!-- 若为 byName, 则id为school --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"北京大学111111111"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"北京"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、为应用指定多个spring配置文件"><a href="#3、为应用指定多个spring配置文件" class="headerlink" title="3、为应用指定多个spring配置文件"></a>3、为应用指定多个spring配置文件</h2><img src="/2020/11/10/Spring-02/3.png" class><p>1．<strong>多个配置优势</strong></p><ol><li><p>每个文件的大小比一个文件要小很多。效率高</p></li><li><p>避免多人竞争带来的冲突。<br>如果你的项目有多个模块（相关的功能在一起)，一个模块一个配置文件。</p><p>​            学生考勤模块一个配置文件，张三<br>​            装生成绩一个配置文件，李四</p></li></ol><p>多文件的分配方式：</p><p>   1．按功能模块，一个模块一个配置文件</p><p>   2．按类的功能，数据库相关的配置一个文件配置文件，做事务的功能一个配置文件，做service功能的一个配置文件等</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>三个配置文件.</p><p>spring-school.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        school 模块的配置文件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"school"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba05.School"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"多配置文件"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"北京"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-student.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        student模块所有bean 的声明</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.thorine.ba05.Student"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"多配置文件"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"88"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三个是主配置文件 total.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        包含关系的配置文件：</span></span><br><span class="line"><span class="comment">        表示主配置文件：用来包含其他的配置文件，该配置文件不定义对象</span></span><br><span class="line"><span class="comment">        语法： &lt;import resource="其他配置文件的路径" /&gt;</span></span><br><span class="line"><span class="comment">        关键字："classpath": 表示类路径(class文件所在的目录，在target目录下的是classes目录下)，</span></span><br><span class="line"><span class="comment">        在spring的配置文件中要指定其他文件的位置，需要使用classpath，告诉spring到哪去加载读取文件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载的是文件列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:ba05/spring-school.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:ba05/spring-student.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在包含关系的配置文件中，可以使用通配符(*: 表示任意字符)</span></span><br><span class="line"><span class="comment">        并且注意：不能包含主配置文件，将spring-total.xml 改名 total.xml</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:ba05/spring-*.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他代码基本一致，注意把调用的config改为 total.xml 即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇spring入门案例，本篇文章讲解如何给对象赋值，即DI操作。本篇总结第一种基于XML的DI。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://iceWind-R.github.io/categories/Web/"/>
    
    
      <category term="spring" scheme="http://iceWind-R.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring_01</title>
    <link href="http://icewind-r.github.io/2020/11/09/Spring-01/"/>
    <id>http://icewind-r.github.io/2020/11/09/Spring-01/</id>
    <published>2020-11-09T11:24:21.000Z</published>
    <updated>2020-11-15T08:14:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 入门。</p><a id="more"></a><hr><p>Spring 全家桶：spring，springMVC，Spring Boot，Spring Cloud，它们都是框架，负责Java开发的各个方面。先开始学习最基础的Spring。</p><h1 id="一、Spring概述"><a href="#一、Spring概述" class="headerlink" title="一、Spring概述"></a>一、Spring概述</h1><p>优点：减轻对项目模块的管理，类和类之间的管理，帮助开发人员创建对象，管理对象之间的关系。</p><p>Spring核心技术：IOC，AOP。能实现模块之间、类之间的解耦合。</p><p>spring是一个开源组织，有很多项目，在官网中可以看到有如下project，每一个project就是一个开源框架。</p><img src="/2020/11/09/Spring-01/1.png" class><p>我们学习的spring框架，就是其中的spring framework。</p><h2 id="Spring-优点"><a href="#Spring-优点" class="headerlink" title="Spring 优点"></a>Spring 优点</h2><ul><li><strong>轻量</strong>：核心功能依赖的jar包少，总共3M左右。且占用资源少。</li><li><strong>解耦合</strong>：针对接口编程，提供了IOC控制反转，由容器管理对象之间的依赖关系。原来在程序代码中的对象创建方式，现在由容器完成。</li><li><strong>AOP</strong>：进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</li><li>方便集成各种优秀的框架：Spring对一些优秀的框架提供了直接的支持。</li><li>声明式事务的支持：只需要通过配置就可以完成对事务的管理，而无须手动编程。</li><li>方便程序的测试：Spring 支持 JUnit4，可以通过注解方便地测试 Spring 程序。</li></ul><h1 id="二、Spring体系结构详解"><a href="#二、Spring体系结构详解" class="headerlink" title="二、Spring体系结构详解"></a>二、Spring体系结构详解</h1><p>Spring框架采用分层架构，根据不同的功能被划分成了多个模块，这些模块大体可分为 Data Access/Integration、Web、AOP、Aspects、Messaging、Instrumentation、Core Container 和 Test。</p><img src="/2020/11/09/Spring-01/1.gif" class><p>图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍。</p><h2 id="1-Data-Access-Integration（数据访问／集成）"><a href="#1-Data-Access-Integration（数据访问／集成）" class="headerlink" title="1. Data Access/Integration（数据访问／集成）"></a>1. Data Access/Integration（数据访问／集成）</h2><p>数据访问/集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍如下。</p><ul><li>JDBC 模块：提供了一个 JDBC 的抽象层，大幅度减少了在开发过程中对数据库操作的编码。</li><li>ORM 模块：对流行的对象关系映射 API，包括 JPA、JDO、<a href="http://c.biancheng.net/hibernate/" target="_blank" rel="noopener">Hibernate</a> 和 iBatis 提供了的集成层。</li><li>OXM 模块：提供了一个支持对象/XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。</li><li>JMS 模块：指 Java 消息服务，包含的功能为生产和消费的信息。</li><li>Transactions 事务模块：支持编程和声明式事务管理实现特殊接口类，并为所有的 POJO。</li></ul><h2 id="2-Web-模块"><a href="#2-Web-模块" class="headerlink" title="2. Web 模块"></a>2. Web 模块</h2><p>Spring 的 Web 层包括 Web、Servlet、Struts 和 Portlet 组件，具体介绍如下。</p><ul><li>Web 模块：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IoC 容器初始化以及 Web 应用上下文。</li><li>Servlet模块：包括 Spring 模型—视图—控制器（MVC）实现 Web 应用程序。</li><li>Struts 模块：包含支持类内的 Spring 应用程序，集成了经典的 Struts Web 层。</li><li>Portlet 模块：提供了在 Portlet 环境中使用 MV C实现，类似 Web-Servlet 模块的功能。</li></ul><h2 id="3-Core-Container（核心容器）"><a href="#3-Core-Container（核心容器）" class="headerlink" title="3. Core Container（核心容器）"></a>3. Core Container（核心容器）</h2><p>Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 Expression Language 表达式语言模块组成，具体介绍如下。</p><ul><li>Beans 模块：提供了 BeanFactory，是工厂模式的经典实现，Spring 将管理对象称为 Bean。</li><li>Core 核心模块：提供了 Spring 框架的基本组成部分，包括 IoC 和 DI 功能。</li><li>Context 上下文模块：建立在核心和 Beans 模块的基础之上，它是访问定义和配置任何对象的媒介。ApplicationContext 接口是上下文模块的焦点。</li><li>Expression Language 模块：是运行时查询和操作对象图的强大的表达式语言。</li></ul><h2 id="4-其他模块"><a href="#4-其他模块" class="headerlink" title="4. 其他模块"></a>4. 其他模块</h2><p>Spring的其他模块还有 AOP、Aspects、Instrumentation 以及 Test 模块，具体介绍如下。</p><ul><li>AOP 模块：提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</li><li>Aspects 模块：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li>Instrumentation 模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li>Test 模块：支持 Spring 组件，使用 JUnit 或 TestNG 框架的测试。</li></ul><h1 id="三、Spring-IOC-控制反转"><a href="#三、Spring-IOC-控制反转" class="headerlink" title="三、Spring IOC 控制反转"></a>三、Spring IOC 控制反转</h1><p>控制反转（IoC，Inversion of Control），指将把对象的创建、赋值、管理工作都交给代码之外的容器实现。</p><p>控制：创建对象，对象的属性赋值，对象之间的关系管理。</p><p>正转：使用new关键字构造方法创建对象，开发人员主动管理对象。</p><p>反转：把原来的开发人员管理创建对象的权限转移给代码之外的容器实现，由容器代替开发人员管理对象。</p><p>容器：是一个服务器软件，一个框架，Spring就是这样一个框架。</p><p>为什么IoC：减少对代码的改动，实现解耦合。</p><h2 id="IoC体现"><a href="#IoC体现" class="headerlink" title="IoC体现"></a>IoC体现</h2><p>Tomcat作为容器，里面存放着Servlet，Listener，Filter等对象，不用手动创建对象。</p><h2 id="IoC技术实现"><a href="#IoC技术实现" class="headerlink" title="IoC技术实现"></a>IoC技术实现</h2><p>使用DI（Dependency Injection）实现IoC的功能。</p><p>DI：依赖注入，只需要在程序中提供所使用对象的名称就可以由 DI 自动创建，赋值和查找。使用的是反射机制。</p><h1 id="四、Spring-的第一个程序"><a href="#四、Spring-的第一个程序" class="headerlink" title="四、Spring 的第一个程序"></a>四、Spring 的第一个程序</h1><p>步骤：</p><p>1、创建Maven项目，导入spring 的相关依赖</p><p>2、创建类（接口类和其实现类），和没有使用框架一样，普通的类。</p><p>3、创建spring需要使用的配置文件：声明类的信息，这些类由spring创建和管理。</p><p>4、测试对象创建</p><h2 id="1、新建Maven工程"><a href="#1、新建Maven工程" class="headerlink" title="1、新建Maven工程"></a>1、新建Maven工程</h2><p>导入spring 的 maven依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、创建接口和实现类"><a href="#2、创建接口和实现类" class="headerlink" title="2、创建接口和实现类"></a>2、创建接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomeServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SomeService 的构造方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了SomeServiceImpl的 doSome() 方法。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建配置文件"><a href="#3、创建配置文件" class="headerlink" title="3、创建配置文件"></a>3、创建配置文件</h2><p>给Maven项目创建resources资源目录，在该目录下创建spring的xml配置文件，依赖导入成功后，会出现spring xml提示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        告诉spring创建对象</span></span><br><span class="line"><span class="comment">        声明bean，就是告诉spring创建某个类的对象</span></span><br><span class="line"><span class="comment">        id：对象的自定义名称，符合Java的命名规则，是唯一的。</span></span><br><span class="line"><span class="comment">        class：类的全限定名称（必须是类，不是接口）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"someService"</span> <span class="attr">class</span>=<span class="string">"com.thorine.service.impl.SomeServiceImpl"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        完成 ：SomeService service = new SomeServiceImpl();</span></span><br><span class="line"><span class="comment">        spring 是把创建好的对象放入map集合中，spring框架有一个map存放对象</span></span><br><span class="line"><span class="comment">        springMap.put(id的值, 对象);</span></span><br><span class="line"><span class="comment">        例如：springMap.put(someService, new SomeServiceImpl());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意：一个bean标签声明一个对象，想声明多个对象，就用多个bean标签</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--表示创建已存在类的对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDate"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、测试对象创建"><a href="#4、测试对象创建" class="headerlink" title="4、测试对象创建"></a>4、测试对象创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * spring创建对象的时间：在创建spring的容器时，会创建配置文件中的所有对象</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 使用spring容器创建对象</span></span><br><span class="line">       <span class="comment">// 指定spring配置文件的名称</span></span><br><span class="line">       String config = <span class="string">"beans.xml"</span>;</span><br><span class="line">       <span class="comment">// 创建表示spring容器的对象，ApplicationContext，就是表示Spring容器，通过容器获取对象</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//ClassPathXmlApplicationContext 表示从类路径中加载spring的配置文件</span></span><br><span class="line">       <span class="comment">// 执行该语句则创建目标对象，执行SomeService的构造函数</span></span><br><span class="line">       ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 从容器中获取某个对象，你要调用对象的方法</span></span><br><span class="line">       <span class="comment">// getBean("配置文件中的bean的id值")</span></span><br><span class="line">       SomeService service = (SomeService) ac.getBean(<span class="string">"someService"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用spring创建好的对象</span></span><br><span class="line">       service.doSome();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 获取spring容器中 java 对象信息</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String config = <span class="string">"beans.xml"</span>;</span><br><span class="line">       ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用spring提供的方法，获取容器中定义的对象的数量</span></span><br><span class="line">       <span class="keyword">int</span> count = ac.getBeanDefinitionCount();</span><br><span class="line">       System.out.println(<span class="string">"容器中定义对象的数量："</span> + count);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 容器中每个对象的名称</span></span><br><span class="line">       String[] names = ac.getBeanDefinitionNames();</span><br><span class="line">       <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">           System.out.println(name);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 获取一个非自定义类的对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String config = <span class="string">"beans.xml"</span>;</span><br><span class="line">       ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">       Date myDate = (Date) ac.getBean(<span class="string">"myDate"</span>);</span><br><span class="line">       System.out.println(<span class="string">"Date对象："</span>+myDate);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p> 注：</p><p>1、什么样的对象放入spring 容器中？</p><p>​        （1）dao类，service类，controller类，工具类等（使用xml配置文件 或 注解方法 创建对象）</p><p>​        （2）spring中的对象默认都是单例的，在容器中叫这个名称的对象只有一个</p><p>2、不放入spring容器中的对象</p><p>​        （1）实体类对象，实体类对象来自于数据库</p><p>​        （2）servlet、listener、filter等由tomcat创建的对象</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 入门。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://iceWind-R.github.io/categories/Web/"/>
    
    
      <category term="Spring" scheme="http://iceWind-R.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker_01(入门及安装)</title>
    <link href="http://icewind-r.github.io/2020/10/29/Docker-01/"/>
    <id>http://icewind-r.github.io/2020/10/29/Docker-01/</id>
    <published>2020-10-29T06:31:58.000Z</published>
    <updated>2020-11-22T10:09:01.688Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 入门。</p><a id="more"></a><hr><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="什么是docker？"><a href="#什么是docker？" class="headerlink" title="什么是docker？"></a>什么是docker？</h2><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。Docker  将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><h2 id="为什么使用Docker？"><a href="#为什么使用Docker？" class="headerlink" title="为什么使用Docker？"></a>为什么使用Docker？</h2><p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。</p><p><strong>1、更快速的交付和部署</strong></p><p>对开发和运维（devop）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker  可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker  容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。</p><p><strong>2、更高效的虚拟化</strong></p><p>Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。</p><p><strong>3、更轻松的迁移和扩展</strong></p><p>Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。</p><p><strong>4、更简单的管理</strong></p><p>使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。</p><h2 id="Docker相关概念"><a href="#Docker相关概念" class="headerlink" title="Docker相关概念"></a>Docker相关概念</h2><p>Docker是CS架构，主要有两个概念：</p><ul><li><strong>Docker daemon</strong>: 运行在宿主机上，Docker守护进程，用户通过Docker client(Docker命令)与Docker daemon交互</li><li><strong>Docker client</strong>: Docker 命令行工具，是用户使用Docker的主要方式，Docker client与Docker daemon通信并将结果返回给用户，Docker client也可以通过socket或者RESTful api访问远程的Docker daemon</li></ul><img src="/2020/10/29/Docker-01/1.png" class><p>了解了Docker的组成，再来了解一下Docker的三个主要概念：</p><ul><li><strong>Docker image(镜像)</strong>：镜像是只读的，镜像中包含有需要运行的文件。镜像用来创建container，一个镜像可以运行多个container；镜像可以通过DockerFile创建，也可以从Docker hub/registry上下载。</li><li><strong>Docker container(容器)</strong>：容器是Docker的运行组件，启动一个镜像就是一个容器，容器是一个隔离环境，多个容器之间不会相互影响，保证容器中的程序运行在一个相对安全的环境中。</li><li><strong>Docker hub/registry()</strong>: 共享和管理Docker镜像，用户可以上传或者下载上面的镜像，官方地址为<code>https://registry.hub.docker.com/</code>，也可以搭建自己私有的Docker registry。</li></ul><p>镜像就相当于打包好的版本，镜像启动之后运行在容器中，仓库就是装存储镜像的地方。</p><h1 id="Docker安装配置"><a href="#Docker安装配置" class="headerlink" title="Docker安装配置"></a>Docker安装配置</h1><h2 id="Docker的入门安装"><a href="#Docker的入门安装" class="headerlink" title="Docker的入门安装"></a>Docker的入门安装</h2><p>建议在linux环境下安装Docker，window环境搭建比较复杂且容易出错，使用Centos7+yum来安装Docker环境很方便。</p><p>以下安装过程参考 <a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">Docker官方文档</a></p><h3 id="1、安装之前需要先卸载旧的docker（如果有）"><a href="#1、安装之前需要先卸载旧的docker（如果有）" class="headerlink" title="1、安装之前需要先卸载旧的docker（如果有）"></a>1、安装之前需要先卸载旧的docker（如果有）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="2、下载yum-util-包"><a href="#2、下载yum-util-包" class="headerlink" title="2、下载yum-util 包"></a>2、下载yum-util 包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h3 id="3、设置镜像仓库"><a href="#3、设置镜像仓库" class="headerlink" title="3、设置镜像仓库"></a>3、设置镜像仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo # 默认是国外的，很慢，不推荐</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用阿里云镜像地址</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="4、更新yum软件包索引"><a href="#4、更新yum软件包索引" class="headerlink" title="4、更新yum软件包索引"></a>4、更新yum软件包索引</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="5、安装docker"><a href="#5、安装docker" class="headerlink" title="5、安装docker"></a>5、安装docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker-ce社区版（推荐） ee企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="6、启动docker"><a href="#6、启动docker" class="headerlink" title="6、启动docker"></a>6、启动docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><p>使用 <code>docker version</code> 命令查看docker版本</p><h3 id="7、Hello-World-案例"><a href="#7、Hello-World-案例" class="headerlink" title="7、Hello World 案例"></a>7、Hello World 案例</h3><p>下面，我们通过最简单的 image 文件”hello world”，感受一下 Docker。</p><p>可以通过以下命令运行hello-world</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>第一次时，docker未能在本地找到相应的hello-world镜像，便去远程仓库下载。</p><p>完成后可以使用如下命令查看镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash">显示结果</span></span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/hello-world           latest              f2a91732366c        3 months ago        1.848 kB</span><br></pre></td></tr></table></figure><p>输出这段提示以后，hello world就会停止运行，容器自动终止。有些容器不会自动终止，因为提供的是服务，比如Mysql镜像等。</p><h3 id="8、卸载docker"><a href="#8、卸载docker" class="headerlink" title="8、卸载docker"></a>8、卸载docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、删除资源 /var/lib/docker : docker的默认工作路径</span></span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="配置阿里云的镜像加速"><a href="#配置阿里云的镜像加速" class="headerlink" title="配置阿里云的镜像加速"></a>配置阿里云的镜像加速</h2><p>登录阿里云控制台，找到容器镜像服务，找到镜像加速器，选择centos</p><img src="/2020/10/29/Docker-01/2.png" class><p>按照下面的 命令提示，输入自己的阿里云镜像加速命令即可</p><img src="/2020/10/29/Docker-01/3.png" class><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><h3 id="Docker是怎么工作的？"><a href="#Docker是怎么工作的？" class="headerlink" title="Docker是怎么工作的？"></a>Docker是怎么工作的？</h3><p>docker是一个 C-S结构的系统，docker的守护进程运行在主机上，通过socket从客户端访问。</p><p>DockerServer 接受 DockerClient 的指令，就会执行这个命令。</p><img src="/2020/10/29/Docker-01/4.png" class><h3 id="Docker为什么比-VM-快-？"><a href="#Docker为什么比-VM-快-？" class="headerlink" title="Docker为什么比 VM 快 ？"></a>Docker为什么比 VM 快 ？</h3><p>1、Docker有着比虚拟机更少的抽象层。</p><p>2、docker利用的是宿主机的内核，VM 需要是Guest OS。</p><blockquote><p>OS ：操作系统 </p><p>VM(虚拟机)里的OS 称为   GuestOS  </p><p>物理机里的OS 称为            HostOS</p></blockquote><p>所以说，新建一个容器的时候，docker不需要想虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guest OS,分钟级别的；而docker是利用宿主机的操作系统，省略了这个复杂的过程，秒级别!</p><p>之后学习完毕所有的命令，再回过头来看这段理论，就会很清晰！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 入门。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Docker" scheme="http://iceWind-R.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB_01</title>
    <link href="http://icewind-r.github.io/2020/10/22/MongoDB-01/"/>
    <id>http://icewind-r.github.io/2020/10/22/MongoDB-01/</id>
    <published>2020-10-22T02:30:26.000Z</published>
    <updated>2020-10-22T15:29:07.687Z</updated>
    
    <content type="html"><![CDATA[<p>今天安装了mongoDB，记录一下。</p><a id="more"></a><hr><h1 id="一、MongoDB-centos7安装"><a href="#一、MongoDB-centos7安装" class="headerlink" title="一、MongoDB centos7安装"></a>一、MongoDB centos7安装</h1><p>首先在官网下载安装包，我这里选择的是RedHat,Linux， 得到的安装包为 ：mongodb-linux-x86_64-rhel70-3.6.20.tgz。上传到虚拟机解压。</p><img src="/2020/10/22/MongoDB-01/1.png" class><p>重命名：mv mongodb-linux-x86_64-rhel70-4.0.10  mongodb-4.0.101。</p><p>然后进行如下配置即可。</p><p>首先配置环境变量：（似乎，不配也可以？）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;mongodb&#x2F;mongodb-4.0.10&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>然后在mongoDB的根目录下创建配置文件：touch mongodb.conf。</p><p>填写如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">port=27017 #端口</span><br><span class="line">dbpath= /usr/mongodb/mongodb-4.0.10/db #数据库存文件存放目录</span><br><span class="line">logpath= /usr/mongodb/mongodb-4.0.10/log/mongodb.log #日志文件存放路径</span><br><span class="line">logappend=true #使用追加的方式写日志</span><br><span class="line">fork=true #以守护进程的方式运行，创建服务器进程</span><br><span class="line">maxConns=100 #最大同时连接数</span><br><span class="line">noauth=true #不启用验证</span><br><span class="line">journal=true #每次写入会记录一条操作日志（通过journal可以重新构造出写入的数据）。</span><br><span class="line">             #即使宕机，启动时wiredtiger会先将数据恢复到最近一次的checkpoint点，然后重放后续的journal日志来恢复。</span><br><span class="line">storageEngine=wiredTiger  #存储引擎，有mmapv1、wiretiger、mongorocks</span><br><span class="line">bind_ip=0.0.0.0  #设置成全部ip可以访问，这样就可以在windows中去连虚拟机的MongoDB，也可以设置成某个网段或者某个p1234567891011</span><br></pre></td></tr></table></figure><p>然后创建数据库和日志相应的文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir db # 数据库目录</span><br><span class="line">mkdir log # 日志目录</span><br><span class="line">cd log/</span><br><span class="line">touch mongodb.log</span><br></pre></td></tr></table></figure><p>然后在bin目录下使用命令：</p><p>mongod –config ../mongodb.conf  开启服务。</p><p>之后可以在本地navicate测试连接。</p><h1 id="二、MongoDB概念解析"><a href="#二、MongoDB概念解析" class="headerlink" title="二、MongoDB概念解析"></a>二、MongoDB概念解析</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在mongodb中基本的概念是文档、集合、数据库，如下表：</p><table><thead><tr><th align="left">SQL术语/概念</th><th align="left">MongoDB术语/概念</th><th align="left">解释/说明</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">database</td><td align="left">数据库</td></tr><tr><td align="left">table</td><td align="left">collection</td><td align="left">数据库表/集合</td></tr><tr><td align="left">row</td><td align="left">document</td><td align="left">数据记录行/文档</td></tr><tr><td align="left">column</td><td align="left">field</td><td align="left">数据字段/域</td></tr><tr><td align="left">index</td><td align="left">index</td><td align="left">索引</td></tr><tr><td align="left">table joins</td><td align="left"></td><td align="left">表连接,MongoDB不支持</td></tr><tr><td align="left">primary key</td><td align="left">primary key</td><td align="left">主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><p>具体如下图：</p><img src="/2020/10/22/MongoDB-01/2.png" class><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>(1）面向集合存储，易于存储对象类型的数据</p><p>(2）模式自由</p><p>(3）支持动态查询</p><p>(4）支持完全索引，包含内部对象(5）支持复制和故障恢复</p><p>(6）使用高效的二进制数据存储，包括大型对象（如视频等)</p><p>(7）自动处理碎片，以支持云计算层次的扩展性</p><p>(8）支持Python，PHP，Ruby，Java，C，C#，Javascript，Perl及C++语言的驱动程序，社区中也提供了对Erlang及.NET等平台的驱动程序</p><p>(9）文件存储格式为BSON(一种JSON的扩展)</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li><p>null:用于表示空值或者不存在的字段，{““x”:null}</p></li><li><p>布尔型:布尔类型有两个值true和false，{“x”:true}</p></li><li><p>数值: shell默认使用64位<strong>浮点型</strong>数值。{“x”:3.14}或{“x”:3}。对于整型值，可以使用NumberInt(4字节符号整数）或NumberLong （8字节符号整数），”×”:NumberInt(“3’”))X”x”:NumberLong(“3”))</p></li><li><p>字符串:UTF-8字符串都可以表示为字符串类型的数据，”×”:“呵呵”</p></li><li><p>日期:日期被存储为自新纪元依赖经过的毫秒数，不存储时区，{ “x” : new Date() }</p></li><li><p>正则表达式:查询时，使用正则表达式作为限定条件，语法与JavaScript的正则表达式相同，”x”:/[abc]/} （正则表达式写在两个斜杠之间）</p></li><li><p>数组:数据列表或数据集可以表示为数组，{X”:[“a”,”b”,”c”]}</p></li><li><p>内嵌文档:文档可以嵌套其他文档，被嵌套的文档作为值来处理，{“x”;{“y”:3 }}</p></li><li><p>对象ld:对象id是一个12字节的字符串，是文档的唯一标识，{“x”: objectld() }</p></li><li><p>二进制数据:二进制数据是一个任意字节的字符串。它不能直接在shell中使用。如果要将非utf-字符保存到数据库中，二进制数据是唯一的方式。</p></li><li><p>代码:查询和文档中可以包括任何JavaScript代码，{“x”:function(){/…/}}</p></li></ul><h1 id="三、Shell命令"><a href="#三、Shell命令" class="headerlink" title="三、Shell命令"></a>三、Shell命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>查看数据库：show dbs</p><p>选择 /  创建 数据库 ： use 数据库名</p><p>（隐式创建：在mongoDB中选择不存在的数据库时不会报错，后期当该数据库有数据时，系统自动创建）</p><p>查看集合：show collections</p><p>创建集合：db.createCollection(‘集合名’) 。注：后期插入数据时隐式创建集合</p><p>删除集合：db.集合名.drop()</p><p>删除数据库：通过use语法选中数据库，通过db.dropDatabase()删除数据库。</p><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>语法：db.集合名.insert(JSON数据)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在test数据库的c1集合中插入数据，并且 键 统一不加引号</span><br><span class="line">use test</span><br><span class="line">db.c1.insert(&#123;uname:&#39;zhangsan&#39;, age &#x3D; 18&#125;)</span><br></pre></td></tr></table></figure><p>通过 db.集合名.find() 查看该集合内的数据</p><img src="/2020/10/22/MongoDB-01/3.png" class><p>其中，mongoDB会给每条数据增加一个全球唯一的 _id 键。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li><p>可以自定义 _id 值，只需要给插入的JSON数据增加 _id 键即可覆盖 （但强烈不推荐）</p></li><li><p>一次性插入多条数据？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.c1.insert([</span><br><span class="line">    &#123;uname:&quot;lisi&quot;, age&#x3D;19&#125;,</span><br><span class="line">    &#123;uname:&quot;lisi2&quot;, age&#x3D;29&#125;,</span><br><span class="line">    &#123;uname:&quot;lisi3&quot;, age&#x3D;39&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li><li><p>插入多条数据</p><p>mongoDB底层使用JS引擎实现的，所以支持部分JS语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) print(i)</span><br><span class="line"></span><br><span class="line">需求：在test中c1集合插入十条数据</span><br><span class="line">use test</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    db.c1.insert(&#123;<span class="attr">uname</span>: <span class="string">"a"</span> + i, <span class="attr">age</span> : i&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 循环是一条一条插入数据的，前九条数据的提示没有显示，只显示最后一条的提示信息。</p></li></ol><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>语法：db.集合名.remove(条件 [,是否删除一条])</p><p>注意：是否删除一条，true 是，false，否 默认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.c1.remove(&#123;&#125;, true) # 删除一条数据</span><br><span class="line"></span><br><span class="line">db.c1.remove(&#123;&#125;) # 删除c1下所有数据</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p><strong>基础语法</strong>：db.集合名.update(条件，新数据 [, 是否新增，是否修改多条])</p><p>是否新增：指条件匹配不到数据则插入(true是插入，false 不插入，默认)</p><p>是否修改多条：指将匹配成功的数据都修改（true 是，false 不是 默认）</p><p><strong>升级语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update(条件，新数据)</span><br><span class="line"></span><br><span class="line">新数据格式：&#123;修改器: &#123;键:值&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>修改器表</strong></p><table><thead><tr><th>修改器</th><th>作用</th></tr></thead><tbody><tr><td>$inc</td><td>递增</td></tr><tr><td>$rename</td><td>重命名列</td></tr><tr><td>$set</td><td>修改列值</td></tr><tr><td>$unset</td><td>删除列</td></tr></tbody></table><p>案例：</p><p>假设表中有数据，<code>uname:&quot;zhangsan&quot;, age=19</code> ，修改uname为lisi。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.c1.update(&#123;uname:&quot;zhangsan&quot;&#125;,&#123;uname:&quot;lisi&quot;&#125;)</span><br><span class="line"> # 会发现age列不见，则默认语法实则为替换，而不是修改</span><br><span class="line"> </span><br><span class="line">db.c1.update(&#123;uname:&quot;zhangsan&quot;&#125;,&#123;$set:&#123;uname:&quot;lisi&quot;&#125;&#125;) # 修改成功</span><br><span class="line"></span><br><span class="line"># 若修改多级(score.Math), 则必须加引号</span><br><span class="line">db.student.update(&#123;name:&quot;lisi&quot;&#125;,&#123;$set:&#123;&quot;score.Math&quot;:95&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>练习</strong>：给{uname;”zhangsan”} 的年龄 +2 或 -2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.c1.update(&#123;uname:&quot;a10&quot;&#125;,&#123;$inc:&#123;age:2&#125;&#125;)</span><br><span class="line">db.c1.update(&#123;uname:&quot;a10&quot;&#125;,&#123;$inc:&#123;age:-2&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>综合案例</strong>：</p><p>插入数据：db.c4.insert({uname:”神龙教主”,age:888,who:”男”,other:”非国人”})</p><p>完成需求：</p><ul><li><p>uname 改为 ”飞天教主“    （修改器：$set）</p></li><li><p>age 增加 111                     （修改器：$inc）</p></li><li><p>who 改字段名 sex            （修改器：rename）</p></li><li><p>other 字段删除                  （修改器：$unset)</p></li></ul><p>那么我们如何一次性写多个修改器呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.c4.update(&#123;uname:&quot;神龙教主&quot;&#125;,&#123;$set:&#123;uname:&quot;飞天教主&quot;&#125;&#125;)</span><br><span class="line">   &#123;$inc:&#123;age:111&#125;&#125;</span><br><span class="line">   &#123;$rename:&#123;who:&quot;sex&quot;&#125;&#125;</span><br><span class="line">                               &#123;$unset:&#123;other:true&#125;&#125;</span><br><span class="line">                               </span><br><span class="line">db.c4.update(&#123;uname:&quot;神龙教主&quot;&#125;,&#123;</span><br><span class="line">      $set:&#123;uname:&quot;飞天教主&quot;&#125;,</span><br><span class="line">      $inc:&#123;age:111&#125;,</span><br><span class="line">  $rename:&#123;who:&quot;sex&quot;&#125;,</span><br><span class="line">      $unset:&#123;other:true&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p><strong>基础语法</strong>：db.集合名.find(条件 [,查询的列])</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">条件</span><br><span class="line">查询所有数据  &#123;&#125;</span><br><span class="line">查询age&#x3D;6的数据   &#123;age:6&#125;</span><br><span class="line">既要age&#x3D;6又要性别&#x3D;男 &#123;age:6,sex:&#39;男&#39;&#125;</span><br><span class="line"></span><br><span class="line">查询的列（可选参数）</span><br><span class="line">不写则查询所有字段</span><br><span class="line">&#123;age:1&#125; 只显示age列</span><br><span class="line">&#123;age:0&#125; 除了age列都显示</span><br><span class="line">注意：不管怎么写，_id 字段都会在</span><br></pre></td></tr></table></figure><p><strong>高级语法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(&#123;</span><br><span class="line">     键:&#123;运算符:值&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运算符表：</p><table><thead><tr><th align="center">运算符</th><th>作用</th></tr></thead><tbody><tr><td align="center">$gt</td><td>大于</td></tr><tr><td align="center">$gte</td><td>大于等于</td></tr><tr><td align="center">$lt</td><td>小于</td></tr><tr><td align="center">$lte</td><td>小于等于</td></tr><tr><td align="center">$ne</td><td>不等于</td></tr><tr><td align="center">$in</td><td>in</td></tr><tr><td align="center">$nin</td><td>not in</td></tr></tbody></table><p><strong>例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询c1集合下所有的uname</span><br><span class="line">db.c1.find(&#123;&#125;,&#123;uname:1&#125;)</span><br><span class="line"></span><br><span class="line"># 查询年龄大于5岁的数据</span><br><span class="line">db.c1.find(&#123;age: &#123;$gt:5&#125;&#125;)</span><br><span class="line"></span><br><span class="line"># 查询年龄是5岁、8岁、10岁的数据</span><br><span class="line">db.c1.find(&#123;age:&#123;$in:[5,8,10]&#125;&#125;) # 集合里</span><br></pre></td></tr></table></figure><h1 id="四、JAVA-API"><a href="#四、JAVA-API" class="headerlink" title="四、JAVA　API"></a>四、JAVA　API</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天安装了mongoDB，记录一下。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HBase_04</title>
    <link href="http://icewind-r.github.io/2020/10/17/HBase-04/"/>
    <id>http://icewind-r.github.io/2020/10/17/HBase-04/</id>
    <published>2020-10-17T14:44:21.000Z</published>
    <updated>2020-10-17T15:34:11.037Z</updated>
    
    <content type="html"><![CDATA[<p>HBase 与 MapReduce 的交互。</p><a id="more"></a><hr><p>1、查看HBase的MapReduce任务的执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hbase mapredcp</span><br></pre></td></tr></table></figure><p>2、环境变量的导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=hbase安装目录</span><br><span class="line">export HADOOP_HOME=Hadoop安装目录</span><br></pre></td></tr></table></figure><p>并在hadoop-env.sh中配置：（注意：在for循环之后配）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/export/servers/hbase-1.3.1/lib/*</span><br></pre></td></tr></table></figure><img src="/2020/10/17/HBase-04/1.png" class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HBase 与 MapReduce 的交互。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="HBase" scheme="http://iceWind-R.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>HBase_03</title>
    <link href="http://icewind-r.github.io/2020/10/17/HBase-03/"/>
    <id>http://icewind-r.github.io/2020/10/17/HBase-03/</id>
    <published>2020-10-17T02:12:02.000Z</published>
    <updated>2020-10-17T12:57:51.176Z</updated>
    
    <content type="html"><![CDATA[<p>总结在本机Windows上通过JAVA 的 API 操作 HBase。</p><a id="more"></a><hr><p>pom.xml 的配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-protocol<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本篇代码进行了一定程度的封装，在本类的main方法中实现具体函数功能。</p><p><strong>DDL的操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* DDL:</span></span><br><span class="line"><span class="comment">*   1、判断表是否存在</span></span><br><span class="line"><span class="comment">*   2、创建表</span></span><br><span class="line"><span class="comment">*   3、创建namespace</span></span><br><span class="line"><span class="comment">*   4、删除表</span></span><br><span class="line"><span class="comment">* DML：</span></span><br><span class="line"><span class="comment">*   5、插入数据</span></span><br><span class="line"><span class="comment">*   6、查询数据（get）</span></span><br><span class="line"><span class="comment">*   7、查询（scan）</span></span><br><span class="line"><span class="comment">*   8、删除数据</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDDL</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Connection代表客户端和集群的一个连接,这个连接包含对master的连接，和zk的连接</span></span><br><span class="line"><span class="comment">    * Connection的创建是重量级的，因此建议一个应用只创建一个Connection对象.</span></span><br><span class="line"><span class="comment">    * Connection是线程安全的，可以在多个线程中共享同一个Connection实例.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 从Connection中获取Table和Admin对象的实例！Table和Admin对象的创建是轻量级，且不是线程安全的！</span></span><br><span class="line"><span class="comment">    * 因此不建议池化或缓存Table和Admin对象的实例，每个线程有自己的Table和Admin对象的实例！</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Admin admin = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration configuration = HBaseConfiguration.create();</span><br><span class="line">            configuration.set(<span class="string">"hbase.zookeeper.quorum"</span>, <span class="string">"bigdata1:2181,bigdata2:2181,bigdata3:2181"</span>);</span><br><span class="line">            <span class="comment">// 创建连接对象</span></span><br><span class="line">            connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            <span class="comment">// 创建管理员对象</span></span><br><span class="line">            admin = connection.getAdmin();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (admin != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                admin.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、判断表是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTableExist</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> admin.tableExists(TableName.valueOf(tableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、创建表</span></span><br><span class="line">    <span class="comment">// 第一个参数表明，第二个为可变参数，列族信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(String tableName, String... cfs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否存在列族信息</span></span><br><span class="line">        <span class="keyword">if</span> (cfs.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请设置列族信息"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断表是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (isTableExist(tableName)) &#123;</span><br><span class="line">            System.out.println(tableName + <span class="string">" 表 已存在。"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、创建表</span></span><br><span class="line">        <span class="comment">// 创建表描述器</span></span><br><span class="line">        HTableDescriptor hTableDescriptor = <span class="keyword">new</span> HTableDescriptor(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环添加列族信息</span></span><br><span class="line">        <span class="keyword">for</span> (String cf : cfs) &#123;</span><br><span class="line">            <span class="comment">// 创建列族描述器</span></span><br><span class="line">            HColumnDescriptor hColumnDescriptor = <span class="keyword">new</span> HColumnDescriptor(cf);</span><br><span class="line">         <span class="comment">// hColumnDescriptor.setMaxVersions(5); // 版本数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加具体列族信息</span></span><br><span class="line">            hTableDescriptor.addFamily(hColumnDescriptor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建表</span></span><br><span class="line">        admin.createTable(hTableDescriptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、删除表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isTableExist(tableName)) &#123;</span><br><span class="line">            System.out.println(tableName + <span class="string">" 表不存在，无法删除！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使表下线</span></span><br><span class="line">        admin.disableTable(TableName.valueOf(tableName));</span><br><span class="line">        <span class="comment">// 删除表</span></span><br><span class="line">        admin.deleteTable(TableName.valueOf(tableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建命名空间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createNamespace</span><span class="params">(String nsName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建命名空间描述器</span></span><br><span class="line">        NamespaceDescriptor namespaceDescriptor = NamespaceDescriptor.create(nsName).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建命令空间</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            admin.createNamespace(namespaceDescriptor);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamespaceExistException e) &#123;</span><br><span class="line">            System.out.println(nsName + <span class="string">" 命令空间已存在！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"命令空间已存在，但我仍可以走到这！！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(isTableExist(<span class="string">"stu1"</span>));</span><br><span class="line">        <span class="comment">// 这个表名表示在命名空间0408下创建表stu1</span></span><br><span class="line">        createTable(<span class="string">"0408:stu1"</span>,<span class="string">"info1"</span>,<span class="string">"info2"</span>);</span><br><span class="line"></span><br><span class="line">        dropTable(<span class="string">"stu1"</span>);</span><br><span class="line"></span><br><span class="line">        createNamespace(<span class="string">"0408"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(isTableExist(<span class="string">"stu1"</span>));</span><br><span class="line"></span><br><span class="line">        close(); <span class="comment">// 关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DML的操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * DDL:</span></span><br><span class="line"><span class="comment"> *   1、判断表是否存在</span></span><br><span class="line"><span class="comment"> *   2、创建表</span></span><br><span class="line"><span class="comment"> *   3、创建namespace</span></span><br><span class="line"><span class="comment"> *   4、删除表</span></span><br><span class="line"><span class="comment"> * DML：</span></span><br><span class="line"><span class="comment"> *   5、插入数据</span></span><br><span class="line"><span class="comment"> *   6、查询数据（get）</span></span><br><span class="line"><span class="comment"> *   7、查询（scan）</span></span><br><span class="line"><span class="comment"> *   8、删除数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDML</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Admin admin = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration configuration = HBaseConfiguration.create();</span><br><span class="line">            configuration.set(<span class="string">"hbase.zookeeper.quorum"</span>, <span class="string">"bigdata1:2181,bigdata2:2181,bigdata3:2181"</span>);</span><br><span class="line">            <span class="comment">// 创建连接对象</span></span><br><span class="line">            connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            <span class="comment">// 创建管理员对象</span></span><br><span class="line">            admin = connection.getAdmin();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (admin != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                admin.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向表中插入数据</span></span><br><span class="line">    <span class="comment">// 参数：表名，rowKey，列族，列名，value</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putData</span><span class="params">(String tableName, String rowKey, String cf, String cn, String value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取表对象</span></span><br><span class="line">       Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建put对象</span></span><br><span class="line">       Put put = <span class="keyword">new</span> Put(Bytes.toBytes(rowKey));<span class="comment">// Bytes 为 hbase.utils 下的工具包，将目标类型转为字节数组</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 给put对象赋值</span></span><br><span class="line">       put.addColumn(Bytes.toBytes(cf),Bytes.toBytes(cn),Bytes.toBytes(value));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 若想添加多个列，多调用下面方法即可</span></span><br><span class="line">       <span class="comment">// put.addColumn(Bytes.toBytes(cf),Bytes.toBytes(cn),Bytes.toBytes(value));</span></span><br><span class="line">       <span class="comment">// put.addColumn(Bytes.toBytes(cf),Bytes.toBytes(cn),Bytes.toBytes(value));</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 插入数据</span></span><br><span class="line">       <span class="comment">// 若想添加多个RowKey，只需创建多个Put对象，放到一个集合里，再用下面的put方法，插入一个集合对象。</span></span><br><span class="line">       table.put(put);</span><br><span class="line">       <span class="comment">// 关闭表连接</span></span><br><span class="line">       table.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取数据 get</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String tableName, String rowKey, String cf, String cn)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取表对象</span></span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建get对象</span></span><br><span class="line">        Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定获取的列族</span></span><br><span class="line">        <span class="comment">// get.addFamily(Bytes.toBytes(cf));</span></span><br><span class="line">        <span class="comment">// 指定获取的列族 和 列</span></span><br><span class="line">        get.addColumn(Bytes.toBytes(cf),Bytes.toBytes(cn));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置获取数据的版本数</span></span><br><span class="line">        get.setMaxVersions(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        Result result = table.get(get);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析result</span></span><br><span class="line">        <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">            System.out.print(<span class="string">"ROW:"</span> + Bytes.toString(CellUtil.cloneRow(cell)));</span><br><span class="line">            System.out.print(<span class="string">", CN:"</span> + Bytes.toString(CellUtil.cloneQualifier(cell)));</span><br><span class="line">            System.out.print(<span class="string">", VALUE:"</span> + Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">            System.out.println(<span class="string">", CF:"</span> + Bytes.toString(CellUtil.cloneFamily(cell)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭表连接</span></span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据 scan</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建Scan对象</span></span><br><span class="line">        <span class="comment">// Scan scan = new Scan();</span></span><br><span class="line">        <span class="comment">// 指定RowKey范围从 10010 到 1003 ，左闭右开</span></span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan(Bytes.toBytes(<span class="string">"10010"</span>),Bytes.toBytes(<span class="string">"1003"</span>));</span><br><span class="line">        <span class="comment">// 扫描表</span></span><br><span class="line">        ResultScanner resultScanner = table.getScanner(scan);</span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        <span class="keyword">for</span> (Result result : resultScanner) &#123;</span><br><span class="line">            <span class="comment">// 打印</span></span><br><span class="line">            <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">                System.out.print(<span class="string">"ROW:"</span> + Bytes.toString(CellUtil.cloneRow(cell)));</span><br><span class="line">                System.out.print(<span class="string">", CN:"</span> + Bytes.toString(CellUtil.cloneQualifier(cell)));</span><br><span class="line">                System.out.print(<span class="string">", VALUE:"</span> + Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">                System.out.println(<span class="string">", CF:"</span> + Bytes.toString(CellUtil.cloneFamily(cell)));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteData</span><span class="params">(String tableName,String rowKey, String cf, String cn)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        <span class="comment">// 构造删除对象</span></span><br><span class="line">        Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置删除的列</span></span><br><span class="line">        <span class="comment">// delete.addColumn();  // 删除最新的版本 ，十分诡异，慎用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给指定的列删除所有的版本，若加上第三个参数时间戳，则表示删除指定时间戳以前的数据</span></span><br><span class="line">        delete.addColumns(Bytes.toBytes(cf),Bytes.toBytes(cn));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除指定的列族</span></span><br><span class="line">        delete.addFamily(Bytes.toBytes(cf));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行删除操作</span></span><br><span class="line">        table.delete(delete);</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// putData("stu","1004","info1","name","dongao");</span></span><br><span class="line"><span class="comment">//        getData("student","1001","info","name");</span></span><br><span class="line"><span class="comment">//        scanTable("stu");</span></span><br><span class="line"></span><br><span class="line">        deleteData(<span class="string">"stu"</span>,<span class="string">"1002"</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结在本机Windows上通过JAVA 的 API 操作 HBase。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="HBase" scheme="http://iceWind-R.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>HBase_02(HBase的安装使用)</title>
    <link href="http://icewind-r.github.io/2020/10/16/HBase-02/"/>
    <id>http://icewind-r.github.io/2020/10/16/HBase-02/</id>
    <published>2020-10-16T09:21:05.000Z</published>
    <updated>2020-10-23T00:35:09.209Z</updated>
    
    <content type="html"><![CDATA[<p>HBase的安装和部署，和基本命令使用。</p><a id="more"></a><hr><h1 id="一、HBase的安装部署"><a href="#一、HBase的安装部署" class="headerlink" title="一、HBase的安装部署"></a>一、HBase的安装部署</h1><h2 id="Zookeeper的正常部署"><a href="#Zookeeper的正常部署" class="headerlink" title="Zookeeper的正常部署"></a>Zookeeper的正常部署</h2><p>首先保证zookeeper集群的正常部署，并启动：</p><p>在三台虚拟机的zookeeper安装目录的bin目录下，分别使用命令启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><h2 id="Hadoop正常部署"><a href="#Hadoop正常部署" class="headerlink" title="Hadoop正常部署"></a>Hadoop正常部署</h2><p>Hadoop集群的正常部署并启动。</p><h2 id="HBase的下载安装"><a href="#HBase的下载安装" class="headerlink" title="HBase的下载安装"></a>HBase的下载安装</h2><p>HBase使用的是1.3.1 版本，下载地址 <a href="http://archive.apache.org/dist/hbase/1.3.1/" target="_blank" rel="noopener">http://archive.apache.org/dist/hbase/1.3.1/</a> ，下载hbase-1.3.1-bin.tar.gz 压缩包，上传到bigdata1虚拟机，并解压到相应目录 ( /export/servers/ ) 。</p><h2 id="Hbase配置文件的修改"><a href="#Hbase配置文件的修改" class="headerlink" title="Hbase配置文件的修改"></a>Hbase配置文件的修改</h2><p>HBase的配置文件都在 conf 目录下，这里我们主要对以下几个文件进行修改。</p><h3 id="regionservers"><a href="#regionservers" class="headerlink" title="regionservers"></a>regionservers</h3><p>即RegionServer，region所在的集群，这里写上我们的三台虚拟机主机名，如下。</p><h3 id="hbase-env-sh"><a href="#hbase-env-sh" class="headerlink" title="hbase-env.sh"></a>hbase-env.sh</h3><p>改三个位置，第一个是 27行左右的 JAVA_HOME，去掉注释，改为本地配好的 JDK 地址。</p><p>然后是45行左右，去掉两个export，因为在jdk1.8时已经不再需要。</p><p>第三个地方：128行左右，取消使用HBase内置的zookeeper，很不方便，而且会与我们自己的zookeeper冲突，由true改为法false。</p><h3 id="hbase-site-xml"><a href="#hbase-site-xml" class="headerlink" title="hbase-site.xml"></a>hbase-site.xml</h3><p>增加configuration 内的引用，代码如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://bigdata1:8020/HBase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 默认端口号：16000，默认的web访问：16010 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>16000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata1,bigdata2,bigdata3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/export/servers/zookeeper-3.4.9/zkdatas<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="软连接Hadoop配置文件到HBase"><a href="#软连接Hadoop配置文件到HBase" class="headerlink" title="软连接Hadoop配置文件到HBase"></a>软连接Hadoop配置文件到HBase</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/servers/hadoop-2.7.7/etc/hadoop/core-site.xml /export/servers/hbase-1.3.1/conf/core-site.xml</span><br><span class="line"></span><br><span class="line">ln -s /export/servers/hadoop-2.7.7/etc/hadoop/hdfs-site.xml /export/servers/hbase-1.3.1/conf/hdfs-site.xml</span><br></pre></td></tr></table></figure><h2 id="HBase远程发送到集群其他主机"><a href="#HBase远程发送到集群其他主机" class="headerlink" title="HBase远程发送到集群其他主机"></a>HBase远程发送到集群其他主机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r hbase-1.3.1 bigdata2:$PWD</span><br><span class="line">scp -r hbase-1.3.1 bigdata3:$PWD</span><br></pre></td></tr></table></figure><h2 id="HBase服务的启动"><a href="#HBase服务的启动" class="headerlink" title="HBase服务的启动"></a>HBase服务的启动</h2><p>首先对bin目录下的启动方式做个简单介绍：</p><img src="/2020/10/16/HBase-02/1.png" class><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><h4 id="HBase单节点启动"><a href="#HBase单节点启动" class="headerlink" title="HBase单节点启动"></a>HBase单节点启动</h4><p>在主机bigdata1的 HBase  bin目录下，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;hbase-daemon.sh start master</span><br></pre></td></tr></table></figure><p>启动后，即可访问16010端口查看Web版的HBase。</p><p>启动regionserver。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hbase-daemon.sh start regionserver</span><br></pre></td></tr></table></figure><p>可以看到，region为 启动的bigdata1。</p><img src="/2020/10/16/HBase-02/2.png" class><h4 id="HBase群起群关"><a href="#HBase群起群关" class="headerlink" title="HBase群起群关"></a>HBase群起群关</h4><p>我们可以通过 <code>./stop-hbase.sh</code> 关闭HBase，但此命令只能在master上使用。</p><p>集群启动./start-hbase.sh，此命令在那个主机上启动，则该主机就默认为master。</p><blockquote><p>提示：如果集群之间的节点时间不同步，会导致regionserver无法启动，抛出ClockOutOfSyncException 异常。</p></blockquote><h1 id="二、HBase-Shell操作"><a href="#二、HBase-Shell操作" class="headerlink" title="二、HBase Shell操作"></a>二、HBase Shell操作</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="进入HBase客户端命令行"><a href="#进入HBase客户端命令行" class="headerlink" title="进入HBase客户端命令行"></a>进入HBase客户端命令行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hbase shell</span><br></pre></td></tr></table></figure><h3 id="查看帮助命令"><a href="#查看帮助命令" class="headerlink" title="查看帮助命令"></a>查看帮助命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):001:0&gt; help</span><br></pre></td></tr></table></figure><img src="/2020/10/16/HBase-02/3.png" class><p>ddl是对表的操作，dml是对数据的操作。</p><h3 id="查看当前数据库有哪些表"><a href="#查看当前数据库有哪些表" class="headerlink" title="查看当前数据库有哪些表"></a>查看当前数据库有哪些表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; list</span><br></pre></td></tr></table></figure><p>显示为 0，list只能查用户建的表，系统表则查询不到。</p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status whoami version</span><br></pre></td></tr></table></figure><p>查询服务器状态、查询当前用户、当前<em>hbase</em>使用的版本号。</p><h3 id="使用HBase客户端的注意事项"><a href="#使用HBase客户端的注意事项" class="headerlink" title="使用HBase客户端的注意事项"></a>使用HBase客户端的注意事项</h3><ol><li>backspace为删除后面的字符，若想删除前面，则需要按住Ctrl。</li><li>不熟悉某个命令，可以输入该命令，直接回车，则会给出提示和例子。</li></ol><h2 id="DDL（对表的操作）"><a href="#DDL（对表的操作）" class="headerlink" title="DDL（对表的操作）"></a>DDL（对表的操作）</h2><p>1、<em><em>create *</em>: 创建数据库表，创建命令可看帮助*help ‘create’</em></p><p>语法：<code>create &lt;table&gt;, {NAME =&gt;&lt;family&gt;, VERSIONS =&gt; &lt;VERSIONS&gt;}</code></p><p>例示：<code>create &#39;product&#39;,{NAME =&gt; &#39;computer&#39;, VERSIONS =&gt; 5},{ NAME =&gt; &#39;food&#39; , VERSIONS =&gt; 3}</code></p><p>描述：创建一张名叫<em>‘product’*数据库表，并且创建两个列族，分别为：</em>‘computer’<em>、</em>‘food’*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#39;product&#39;,&#39;computer&#39;,&#39;food&#39;,...</span><br></pre></td></tr></table></figure><p>2、*<em>describe *</em>:  查看表结构描述</p><p>用法：<code>describe &#39;product&#39;</code></p><p>3、<strong>alter</strong> : 修改表</p><p>用法：修改表结构必须先<em>disable</em>，再修改表，修改完成后，再<em>enable</em>表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#96;disable &#39;product&#39;</span><br><span class="line"></span><br><span class="line">alter &#39;product&#39;,&#123;NAME &#x3D;&gt; &#39;food&#39;,VERSIONS&#x3D;&gt; 3&#125;</span><br><span class="line"></span><br><span class="line">alter &#39;表名&#39;,&#123;NAME&#x3D;&gt;&#39;列名&#39;,METHOD&#x3D;&gt;&#39;delete&#39;&#125; # 删除指定的列</span><br><span class="line"></span><br><span class="line">enable &#39;product&#39;</span><br></pre></td></tr></table></figure><p>4、<strong>drop</strong>：删除表</p><p>用法：首先<em>disable</em>，然后<em>drop</em>。</p><p><code>disable &#39;product&#39;</code></p><p><code>drop &#39;product&#39;</code></p><h2 id="DML（对数据的操作）"><a href="#DML（对数据的操作）" class="headerlink" title="DML（对数据的操作）"></a>DML（对数据的操作）</h2><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>插入（修改）数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">put 表名, RowKey, 列族:列名, 数据</span><br><span class="line"></span><br><span class="line">put &#39;stu&#39;,&#39;1001&#39;,&#39;info1:name&#39;,&#39;zhangsan&#39; # 若stu表的info1:name 字段没有值，则代表插入</span><br><span class="line"></span><br><span class="line">put &#39;stu&#39;,&#39;1001&#39;,&#39;info1:name&#39;,&#39;zhangsan1&#39; # 若stu表的info1:name 字段有值，则代表修改</span><br></pre></td></tr></table></figure><h3 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h3><p>查询数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scan 表名</span><br><span class="line">scan &#39;stu&#39;</span><br><span class="line">scan &#39;stu&#39;,&#123;STARTROW&#x3D;&gt;&#39;1001&#39;,STOPROW&#x3D;&gt;&#39;1003&#39;&#125; # 指定查询的范围，从 RowKey 1001 ~ 1003 ，左闭右开，若前或后不写，则代表负无穷 或 正无穷</span><br><span class="line"></span><br><span class="line">scan &#39;stu&#39;,&#123;RAW &#x3D;&gt; true,VERSIONS &#x3D;&gt; 10&#125; # 查询stu表的 10个版本内的所有数据，包括修改之前的数据</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>查询数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get 表名, RowKey, 列族</span><br><span class="line"></span><br><span class="line">get &#39;stu&#39;, &#39;1001&#39;, &#39;info1&#39;</span><br><span class="line">get &#39;stu&#39;, &#39;1001&#39;, &#39;info1:name&#39;</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>删除一个RowKwy里的一个字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete 表名, RowKey, 列族:列名</span><br><span class="line"></span><br><span class="line">delete &#39;stu&#39;,&#39;1001&#39;,&#39;info1:name&#39; # 删除列，1001 数据下的 info1下的name数据全部删除（包括修改前的数据）</span><br></pre></td></tr></table></figure><p>type 会变为 DeleteColumn</p><img src="/2020/10/16/HBase-02/4.png" class><h3 id="deleteall"><a href="#deleteall" class="headerlink" title="deleteall"></a>deleteall</h3><p>删除一个RowKey。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteall &#39;stu&#39;,&#39;1001&#39; # 删除stu表的 RowKey&#x3D;1001 行数据</span><br></pre></td></tr></table></figure><h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><p>清空一张表（删除所有数据，即所有RowKey，所有列族），不建议使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate &#39;stu&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HBase的安装和部署，和基本命令使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="HBase" scheme="http://iceWind-R.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>HBase_01(HBase概念简介)</title>
    <link href="http://icewind-r.github.io/2020/10/15/HBase-01/"/>
    <id>http://icewind-r.github.io/2020/10/15/HBase-01/</id>
    <published>2020-10-15T08:35:54.000Z</published>
    <updated>2020-10-17T12:30:21.896Z</updated>
    
    <content type="html"><![CDATA[<p>就今天吧，稀里糊涂的，入门学习个HBase！就记些比较重要的、需要重点掌握的知识点吧。别问为什么，死记硬背就完事了！</p><a id="more"></a><hr><h1 id="一、HBase简介"><a href="#一、HBase简介" class="headerlink" title="一、HBase简介"></a>一、HBase简介</h1><h2 id="HBase是什么？"><a href="#HBase是什么？" class="headerlink" title="HBase是什么？"></a>HBase是什么？</h2><p>Hbase是一种NoSQL数据库，这意味着它不像传统的RDBMS数据库那样支持SQL作为查询语言。</p><p>HBase是一种构建在HDFS之上的<strong>分布式、面向列</strong>的存储系统。在需要实时读写、随机访问超大规模数据集时，可以使用HBase。</p><h2 id="HBase的特点"><a href="#HBase的特点" class="headerlink" title="HBase的特点"></a>HBase的特点</h2><ol><li><strong>大</strong>：一个表可以有上亿行，上百万列。</li><li><strong>面向列</strong>：面向列表（簇）的存储和权限控制，列（簇）独立检索。</li><li><strong>稀疏</strong>：对于为空（NULL）的列，并不占用存储空间，因此，表可以设计的非常稀疏。</li><li><strong>无模式</strong>：每一行都有一个可以排序的主键和任意多的列，列可以根据需要动态增加，同一张表中不同的行可以有截然不同的列。</li><li><strong>数据多版本</strong>：每个单元中的数据可以有多个版本，默认情况下，版本号自动分配，版本号就是单元格插入时的时间戳。</li><li><strong>数据类型单一</strong>：HBase中的数据都是字符串，没有类型。</li></ol><h1 id="二、数据模型"><a href="#二、数据模型" class="headerlink" title="二、数据模型"></a>二、数据模型</h1><h2 id="1、RowKey"><a href="#1、RowKey" class="headerlink" title="1、RowKey"></a>1、RowKey</h2><p><strong>RowKey</strong> 是一行记录的 <strong>主键</strong> ，用于检索记录数据的。HBase的数据是按照RowKey的 <strong>字典顺序</strong> 进行全局排序的，所有的查询都只能依赖于这一个排序维度。访问 HBase table 中的行，只有三种方式：</p><ol><li><p>通过单个 <strong>RowKey</strong> 访问。</p></li><li><p>通过 <strong>RowKey</strong> 的 range 全表扫描。</p></li><li><p><strong>RowKey</strong> 可以是任意字符串（最大长度是64KB，实际应用中长度一般为 10 ~ 100bytes），在HBase 内部，<strong>RowKey</strong> 保存为字节数组。</p></li></ol><blockquote><p> 通过下面一个例子来说明一下” <strong>字典排序</strong> “的原理：</p><p>RowKey列表{“abc”, “a”, “bdf”, “cdf”, “def”}按字典排序后的结果为{“a”, “abc”, “bdf”, “cdf”, “defg”}</p></blockquote><h2 id="2、Row（行）"><a href="#2、Row（行）" class="headerlink" title="2、Row（行）"></a>2、Row（行）</h2><p>HBase表中的每行数据都是一个RowKey和 多个Column（列）组成，数据是按照RowKey的字典顺序存储的。</p><h2 id="3、Column（列）"><a href="#3、Column（列）" class="headerlink" title="3、Column（列）"></a>3、Column（列）</h2><p>HBase每个列都由列族和列限定符进行限定，例如info：name , info :  age。建表时，只需要指定列族，而列限定符无需预先定义。</p><h2 id="4、Column-Family（列族）"><a href="#4、Column-Family（列族）" class="headerlink" title="4、Column Family（列族）"></a>4、Column Family（列族）</h2><p>如果将Region看成是一个表的 <strong>横向切割</strong> ，那么，一个Region中的数据列的 <strong>纵向切割</strong> ，称之为一个 <strong>Column Family</strong> 。每一个列，都必须归属于一个Column Family，这个归属关系是在写数据时指定的，而不是建表时预先定义。</p><h2 id="5、Cell"><a href="#5、Cell" class="headerlink" title="5、Cell"></a>5、Cell</h2><p>Cell 是由 {RowKey，ColumnFamily : Column Qualifier，TimeStamp} 唯一确定的单元。Cell 中的数据是没有类型的，全部是<strong>字节码</strong>形式存储。</p><h2 id="6、Region"><a href="#6、Region" class="headerlink" title="6、Region"></a>6、Region</h2><p>HBase中采用了”Range分区”，将Key的完整区间切割成一个个的”Key Range” ，每一个”Key Range”称之为一个Region。</p><p>也可以这么理解：将HBase中拥有数亿行的一个大表， <strong>横向切割</strong> 成一个个” <strong>子表</strong> “，这一个个” <strong>子表</strong> “就是 <strong>Region</strong> 。Region是HBase中分布式存储和负载均衡的最小单元，即不同的region可以分别在不同的Region Server上，但同一个Region是不会拆分到多个server上。 </p><p>当一个Region增长到一定大小以后，会自动分裂成两个。</p><p>每个region由以下信息标识：</p><ol><li>&lt; 表名,startRowkey,创建时间&gt;</li><li>由目录表(-ROOT-和.META.)记录该region的endRowkey</li></ol><h2 id="7、TimeStamp（时间戳）"><a href="#7、TimeStamp（时间戳）" class="headerlink" title="7、TimeStamp（时间戳）"></a>7、TimeStamp（时间戳）</h2><p>HBase 中通过 Row 和 Columns 确定的一个存储单元称为 Cell。每个 Cell 都保存着同一份数据的多个版本。 版本通过时间戳来索引，时间戳的类型是 64 位整型。时间戳可以由HBase（在数据写入时自动）赋值，<br>此时时间戳是精确到毫秒的当前系统时间。时间戳也 可以由客户显示赋值。如果应用程序要避免数据版本冲突，就必须自己生成具有唯一性的时间戳。每个 Cell 中，不同版本的数据按照时间倒序排序，即最新的数据排在最前面。</p><p>为了避免数据存在过多版本造成的管理（包括存储和索引）负担，HBase 提供了两种数据版本回收方式。 一是保存数据的最后 n 个版本，二是保存最近一段时间内的版本（比如最近七天）。用户可以针对每个列族进行设置。</p><h2 id="8、稀疏矩阵"><a href="#8、稀疏矩阵" class="headerlink" title="8、稀疏矩阵"></a>8、稀疏矩阵</h2><p>HBase中一个表的数据是按照稀疏矩阵的方式组织的，行与行之间也无须遵循一致的定义，而这种定义恰好符合半结构化数据或非结构化数据的特点。</p><p>HBase定义表是只需要声明 *<em>列族 *</em>即可，不需要声明具体的列，这意味着，往HBase写入数据时，字段可以 动态、按需 指定。</p><h2 id="9、Store"><a href="#9、Store" class="headerlink" title="9、Store"></a>9、Store</h2><p>每一个region由一个或多个store组成，至少是一个store，hbase会把一起访问的数据放在一个store里面，即为每个 ColumnFamily建一个store，如果有几个ColumnFamily，也就有几个Store。一个Store由一个memStore和0或者 多个StoreFile组成。 HBase以store的大小来判断是否需要切分region</p><img src="/2020/10/15/HBase-01/1.png" class><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>Hregion是Hbase中分布式存储和负载均衡的最小单元。最小单元就表示不同的Hregion可以分布在不同的HRegion server上。但一个Hregion是不会拆分到多个server上的。</p><img src="/2020/10/15/HBase-01/3.png" class><p>HRegion虽然是分布式存储的最小单元，但并不是存储的最小单元。HRegion由一个或者多个Store组成，每个store保存一个columns family。每个Strore又由一个memStore和0至多个StoreFile组成。如图：</p><img src="/2020/10/15/HBase-01/4.png" class><p>StoreFile以HFile格式保存在HDFS上。</p><h1 id="三、HBase系统架构"><a href="#三、HBase系统架构" class="headerlink" title="三、HBase系统架构"></a>三、HBase系统架构</h1><img src="/2020/10/15/HBase-01/5.png" class><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>包含访问hbase的接口，client维护着一些cache来加快对hbase的访问，比如regione的位置信息。</p><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p>1 保证任何时候，集群中只有一个master</p><p>2 存贮所有Region的寻址入口。</p><p>3 实时监控Region Server的状态，将Region server的上线和下线信息实时通知给Master</p><p>4 存储Hbase的schema,包括有哪些table，每个table有哪些column family</p><h2 id="RegionServer"><a href="#RegionServer" class="headerlink" title="RegionServer"></a>RegionServer</h2><p>1 Region server维护Master分配给它的region，处理对这些region的IO请求</p><p>2 Region server负责切分在运行过程中变得过大的region</p><p>Data： get，put，delete （HBase通过时间戳控制每条数据，get最新数据，put写入数据，若没有此条数据则代表插入，有则代表修改，delete删除数据）</p><p>Region：splitRegion（切片），compactRegion（合并）</p><h2 id="Master（高可用）"><a href="#Master（高可用）" class="headerlink" title="Master（高可用）"></a>Master（高可用）</h2><p>1 为Region server分配region</p><p>2 负责region server的负载均衡</p><p>3 发现失效的region server并重新分配其上的region</p><p>4 GFS上的垃圾文件回收</p><p>5 处理schema更新请求</p><p>Table：create，alter，delete</p><p>RegionServer：分配region给每个regionServer，监控每个regionServer的状态</p><img src="/2020/10/15/HBase-01/2.png" class><blockquote><p>RegionServer管理着Region，对数据的操作，DML。</p><p>Master管理表的增删改查，以及Region的维护信息，DDL。</p></blockquote><p><strong>总结</strong></p><p>可以看到，client访问hbase上数据的过程并不需要master参与（寻址访问zookeeper和region server，数据读写访问regione server），master仅仅维护者table和region的元数据信息，负载很低。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就今天吧，稀里糊涂的，入门学习个HBase！就记些比较重要的、需要重点掌握的知识点吧。别问为什么，死记硬背就完事了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://iceWind-R.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="HBase" scheme="http://iceWind-R.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>大三上_第3周总结</title>
    <link href="http://icewind-r.github.io/2020/10/07/%E5%A4%A7%E4%B8%89%E4%B8%8A-%E7%AC%AC3%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://icewind-r.github.io/2020/10/07/%E5%A4%A7%E4%B8%89%E4%B8%8A-%E7%AC%AC3%E5%91%A8%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-07T03:29:27.000Z</published>
    <updated>2020-10-07T04:54:16.739Z</updated>
    
    <content type="html"><![CDATA[<p>10.7 ~ 10.10 日</p><hr><p>今天上午逃了刘丹的四节课，想着好好做建民的重大需求，但是竟然，一点进度都没有。明明有着超快的网络，但还是，唉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;10.7 ~ 10.10 日&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天上午逃了刘丹的四节课，想着好好做建民的重大需求，但是竟然，一点进度都没有。明明有着超快的网络，但还是，唉。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/categories/Learning/"/>
    
    
      <category term="plan" scheme="http://iceWind-R.github.io/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>Excel表格操作</title>
    <link href="http://icewind-r.github.io/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/"/>
    <id>http://icewind-r.github.io/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-09-22T11:28:00.000Z</published>
    <updated>2020-09-23T10:02:52.451Z</updated>
    
    <content type="html"><![CDATA[<p>Excel 的重要性不言而喻，学会使用可以使自己的效率大大提高，今天开始学习，做此纪录。</p><a id="more"></a><hr><h1 id="Excel入门"><a href="#Excel入门" class="headerlink" title="Excel入门"></a>Excel入门</h1><p>1、<strong>开始</strong> 菜单的 <strong>合并后居中</strong>，可以实现跨单元格的合并居中。</p><p>2、自动匹配单元格长度，双击<strong>表头</strong>，<strong>列头</strong>，可以使该行（列）自动匹配本行（列）最长单元格。</p><p>3、可以选中若干列，点击<strong>开始</strong>，<strong>单元格样式</strong>，对选中的标题进行样式改变。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/1.png" class><p>4、可以选中所有列，使其所有单元格 宽度 相同。（对行同样适用）</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/1.gif" class><p>5、可以快速产生相同规律（等差数列）的一组数据，选取一个单元格或一组单元格，右下角鼠标变为 “+”，拖动即可实现。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/2.gif" class><p>6、关于<strong>日期</strong>操作</p><ul><li><p>日期如果手动输入，最好采用excel可以识别的格式，即 “/” 标识，如：2020/9/22</p></li><li><p>如果想插入当前日期，可以使用快捷键 ctrl + ;(分号)</p></li><li><p>并且可以在当前单元格右键选择 <strong>设置单元格格式</strong>，进行日期格式的选择。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/2.png" class><p>注意：若出现全部“#”，则代表当前单元格长度不够，未能显示，只需双击表头的间隔处，使单元格匹配内容长度即可。</p></li><li><p>同样，可以选择单元格右下角的 +，进行依次递增的日期。</p></li></ul><p>7、关于数学公式计算。例如上例中的总金额 = 单价 * 数量，这时我们可以用excel的计算能力，我们 在总金额单元格 输入等于号（=），然后单击 单价 之后 输入乘号 ，然后点击 数量，输入回车即可得到计算结果。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/3.gif" class><p>8、可以改变数字的显示。例如金额，可以加上金额符号，并指定数字小数位数。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/3.png" class><p>9、格式刷的使用，选中被格式的单元格，再选中待格式的单元格即可将复制前者的格式。</p><p>10、打印表格。可以点击左上角的<strong>打印预览和打印</strong>，在默认情况下只会打印数据，而表格线等则不会打印，可以在 <strong>页面布局</strong>，勾选 <strong>网格线</strong> 下的 <strong>打印</strong> 按钮。即可在打印时出现网格线。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/4.png" class><p>11、关于表格的格线操作。快捷键 按住 <strong>shift</strong>，选中单元格删除格线，<strong>Esc</strong> 退出。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/4.gif" class><p>12、背景图片。在页面布局中添加背景，可以取消<strong>网格线</strong>的<strong>查看</strong>按钮，来不显示图片上的表格线。也可以删除背景。</p><p>13、函数（自动求和 等）。在生成总和的单元格上，点击该按钮，选择被求和的所有单元格，然后enter，即可得到结果。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/5.png" class><p>14、冻结表格栏 与 拆分视窗。在<strong>视图</strong>选项卡操作。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/5.gif" class><p>15、排序。在排序中，选择待排序列的一个单元格即可，不要选择多个。在 <strong>开始</strong> 的右侧，<strong>排序和筛查</strong>。</p><p>要指定多层排序，可以在 <strong>排序和筛查</strong> 中选择 <strong>自定义排序</strong>，点击 <strong>添加条件</strong>，实现多条件排序。如下界面。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/6.png" class><p>16、自定义序列，在上面的自定义序列中，选择排序次序为自定义，跳到下面选项卡。</p><img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/7.png" class>，输入自定义顺序，以回车间隔。<img src="/2020/09/22/Excel%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C/6.gif" class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Excel 的重要性不言而喻，学会使用可以使自己的效率大大提高，今天开始学习，做此纪录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Offices" scheme="http://iceWind-R.github.io/categories/Offices/"/>
    
    
      <category term="excel" scheme="http://iceWind-R.github.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>我的考研必看</title>
    <link href="http://icewind-r.github.io/2020/09/13/%E6%88%91%E7%9A%84%E8%80%83%E7%A0%94%E5%BF%85%E7%9C%8B/"/>
    <id>http://icewind-r.github.io/2020/09/13/%E6%88%91%E7%9A%84%E8%80%83%E7%A0%94%E5%BF%85%E7%9C%8B/</id>
    <published>2020-09-13T11:45:17.000Z</published>
    <updated>2020-09-21T14:07:10.807Z</updated>
    
    <content type="html"><![CDATA[<p>为什么考研？自己适合考研吗？这两个问题，想要考研的你，真的思考过吗？</p><a id="more"></a><hr><p>给自己定的初步目标：<strong>中下游211本专业</strong></p><p>说到需求，当然就是你考研是想要达到什么目的。我举几个例子，假如说你打算将来考选调生，那么985院校就是目标，专业视具体要求而定；假如你想回老家考个公务员，那选择一个匹配岗位的学校和专业即可；假如你想进入某些知名企业，那么应该调研清楚它的目标院校是什么档次，然后作出选择。</p><p>先说竞争对手方面的因素，这一方面主要从目标院校历年的考生和录取情况来评估。</p><p>1.初试科目是什么</p><p>2.专业课参考书是什么</p><p>3.最近三年的分数线（这一定要看地区，不要盲目对比，二区的380和北京上海的380完全不是一回事）</p><p>4.最近三年的报录比</p><p>5.报考学生的生源大概水平</p><p>6.复试什么形式，在总分中占比多少</p><p>7.最后实际录取学生的总分及单科分数分布（和其他院校对比，要对比同地区的学校公共课的分数，专业课不具可比性）</p><p>8.最后录取学生的本科背景</p><p>9.录取学生中二战以以上的学生比例</p><p>10.录取的跨校跨专业学生的比例</p><p>以上信息都不是能百度的，需要自己去搜集，像5、8、9、10这些问题不需要多么精准，知道大概水平即可。至于怎么搜集，最直接的就是找上一届录取的前辈。<strong>（最近很多人私信我去哪里找已经录取的前辈，大家可以下载一个APP叫做经验超市，这个APP是由北大的几位考研学长开发的，可以去上面看看有没有学长学姐，上面的学长学姐都是经过身份认证的。）</strong></p><p>自身因素方面：</p><p>1.高中学习状态及高考成绩（高中是否尽力学习，高考是正常发挥还是失常或者超常发挥。这一点可以衡量潜在的学习能力，毕竟高考和考研都是类似的应试）</p><p>2.本科院校及专业（正常录取还是填志愿失误造成滑档）</p><p>3.本科成绩（结合自己学习努力程度来看）</p><p>4.个人学习习惯和自制力（十几年的读书经历，想必自己心中应该有数。在考研这种靠自己自律的环境下，能够发生重大改变的人少之又少，不要高估自己的决心和毅力）</p><p>5.考研时间（自己有多少时间准备，本科课程能不能应付，学校的琐事会不会消耗太多时间）</p><p>6.自身心态（自己心态建设做的怎么样，是不是过于焦虑和敏感，是不是能够承压）</p><p>7.公共课基础如何</p><p>8.是否跨专业，专业课是否零基础</p><p><strong>人生终究是回归均值的一个过程，不要以为自己能够轻易的突破。考研之前请认真思考，把握好自己的定位、需求、成本和风险承担能力。每个人的天赋，成长过程，家庭环境都是不同的，即便要向命运挑战，也要结合自己的实际情况。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么考研？自己适合考研吗？这两个问题，想要考研的你，真的思考过吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="考研" scheme="http://iceWind-R.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
</feed>
