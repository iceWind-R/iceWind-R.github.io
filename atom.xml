<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thorine</title>
  
  <subtitle>生活很难，但请务必坚持</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://icewind-r.github.io/"/>
  <updated>2020-06-30T10:54:23.605Z</updated>
  <id>http://icewind-r.github.io/</id>
  
  <author>
    <name>大雪初晴丶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python爬虫_02</title>
    <link href="http://icewind-r.github.io/2020/06/30/Python%E7%88%AC%E8%99%AB-02/"/>
    <id>http://icewind-r.github.io/2020/06/30/Python%E7%88%AC%E8%99%AB-02/</id>
    <published>2020-06-30T09:58:18.000Z</published>
    <updated>2020-06-30T10:54:23.605Z</updated>
    
    <content type="html"><![CDATA[<p>这部分是爬虫初步的爬取实例，涉及网站、搜索、图片等查询。</p><a id="more"></a><hr><h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-02/1.png" class><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="1、爬取亚马逊商品信息"><a href="#1、爬取亚马逊商品信息" class="headerlink" title="1、爬取亚马逊商品信息"></a>1、爬取亚马逊商品信息</h2><p>在我们用简单的get方法爬取时，获取状态码显示503</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-02/2.png" class><p>返回的 r 中包含 request 请求。</p><p>通过<code>r.request.headers</code>查看头部信息，看到User-Agent选项不是浏览器的信息，可以得知亚马逊会组织非浏览器的访问。</p><p><strong>方法：</strong>更改头部信息，使该爬虫模拟浏览器登录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kv = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">url = <span class="string">"https://www.amazon.cn/gp/product/B01M8L5Z3Y"</span></span><br><span class="line">r = requests.get(url, headers = kv)</span><br></pre></td></tr></table></figure><p>此时即可正常爬取。</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-02/3.png" class><h2 id="2、爬虫指定关键字到百度查询结果"><a href="#2、爬虫指定关键字到百度查询结果" class="headerlink" title="2、爬虫指定关键字到百度查询结果"></a>2、爬虫指定关键字到百度查询结果</h2><p>百度的关键词接口：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/s?wd=keyword</span><br></pre></td></tr></table></figure><p>输入keyword得到搜索引擎的搜索结果。</p><p>即对我们的requests库，构造这样的url即可。</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-02/4.png" class><h2 id="3、网络图片的爬取和存储"><a href="#3、网络图片的爬取和存储" class="headerlink" title="3、网络图片的爬取和存储"></a>3、网络图片的爬取和存储</h2><p>图片在网络上的存储地址以图片的后缀为结尾。</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-02/5.png" class><p>代码中，<code>r.content</code>是内容的二进制形式，写入目标文件可得到相应图片。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分是爬虫初步的爬取实例，涉及网站、搜索、图片等查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫_01</title>
    <link href="http://icewind-r.github.io/2020/06/30/Python%E7%88%AC%E8%99%AB-01/"/>
    <id>http://icewind-r.github.io/2020/06/30/Python%E7%88%AC%E8%99%AB-01/</id>
    <published>2020-06-30T04:26:28.000Z</published>
    <updated>2020-06-30T09:58:23.713Z</updated>
    
    <content type="html"><![CDATA[<p>这部分是python记录爬虫功能的笔记，刚刚入门，总结记录。</p><a id="more"></a><hr><p>关于更多requests库的知识，可以查看<a href="https://requests.readthedocs.io/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">官方网站</a>。</p><p>request 库需要安装，比较容易，不再赘述。</p><p>requests库中有七个常用方法。</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/1.png" class><h1 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h1><p>获取一个网页最简单的方法就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url)</span><br></pre></td></tr></table></figure><p> 该方法用于构造一个向服务器请求资源的<code>Request</code>对象，该对象为requests库内部生成的。该方法返回的内容是一个包含服务器资源的Response对象，用<code>r</code>表示，代表一个Response对象。</p><p>get方法的完整使用如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url [, params = <span class="literal">None</span>, **kwargs])</span><br></pre></td></tr></table></figure><blockquote><p>参数含义：</p><ul><li>url：拟获取页面的url链接</li><li>params：url中的额外参数，字典或字节流格式，可选</li><li>**kwargs：12个控制访问的参数</li></ul></blockquote><p>通过查看requests库的源码我们可以发现，七个方法中，其他六个方法都是对get的调用，所以也可认为只有一个get()方法。</p><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p>Response对象包含爬虫返回的所有内容。</p><h3 id="Response对象的属性"><a href="#Response对象的属性" class="headerlink" title="Response对象的属性"></a>Response对象的属性</h3><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/2.png" class><p>理解Requests库的异常</p><h1 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h1><p>网络连接有风险，异常处理很重要。</p><h3 id="Request对象的异常"><a href="#Request对象的异常" class="headerlink" title="Request对象的异常"></a>Request对象的异常</h3><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/3.png" class><h3 id="Response对象的异常"><a href="#Response对象的异常" class="headerlink" title="Response对象的异常"></a>Response对象的异常</h3><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/4.png" class><h2 id="爬取页面的通用代码框架"><a href="#爬取页面的通用代码框架" class="headerlink" title="爬取页面的通用代码框架"></a>爬取页面的通用代码框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment"># 如果状态码不是200，引发HTTPError异常</span></span><br><span class="line">        r.encoding = r.apparent_encoding <span class="comment"># 使得返回内容的解码是正确的</span></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'产生异常'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h1 id="HTTP协议及requests库方法"><a href="#HTTP协议及requests库方法" class="headerlink" title="HTTP协议及requests库方法"></a>HTTP协议及requests库方法</h1><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/5.png" class><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/6.png" class><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/7.png" class><p><strong>一些方法的简单举例</strong></p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/8.png" class><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/9.png" class><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/10.png" class><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/11.png" class><h1 id="Requests库的主要方法解析"><a href="#Requests库的主要方法解析" class="headerlink" title="Requests库的主要方法解析"></a>Requests库的主要方法解析</h1><h2 id="1-requests-request-method-url-kwargs"><a href="#1-requests-request-method-url-kwargs" class="headerlink" title="1. requests.request(method, url, \kwargs)"></a>1. requests.request(<strong>method</strong>, <strong>url</strong>, <strong><em>\</em>kwargs</strong>)</h2><ul><li>method：请求方式，对应get/put/post等7种</li><li>url：拟获取页面的url链接</li><li>**kwargs：控制访问的参数，共13个</li></ul><h3 id="method的7种"><a href="#method的7种" class="headerlink" title="method的7种"></a>method的7种</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r = requests.request(<span class="string">'GET'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'HEAD'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'POST'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'PUT'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'PATCH'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'delete'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'OPTIONS'</span>, url, **kwargs) <span class="comment"># 不常用</span></span><br></pre></td></tr></table></figure><h3 id="kwargs-控制访问的参数，均为可选项"><a href="#kwargs-控制访问的参数，均为可选项" class="headerlink" title="kwargs**: 控制访问的参数，均为可选项"></a>kwargs**: 控制访问的参数，均为可选项</h3><ol><li><p>params : 字典或字节序列，作为参数增加到url中</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/12.png" class></li><li><p>data : 字典、字节序列或文件对象，作为Request的内容</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/13.png" class></li><li><p>json : JSON格式的数据，作为Request的内容</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/14.png" class></li><li><p>headers : 字典，HTTP定制头</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/15.png" class></li><li><p>files : 字典类型，传输文件</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/16.png" class></li><li><p>timeout : 设定超时时间，秒为单位</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/17.png" class></li><li><p>proxies : 字典类型，设定访问代理服务器，可以增加登录认证</p><img src="/2020/06/30/Python%E7%88%AC%E8%99%AB-01/18.png" class></li><li><p>cookies : 字典或CookieJar，Request中的cookie</p></li><li><p>auth : 元组，支持HTTP认证功能</p></li><li><p>allow_redirects：True/False，默认为True，重定向开关</p></li><li><p>stream：True/False，默认为True，获取内容立即下载开关</p></li><li><p>verify：True/False，默认为True，认证SSL证书开关</p></li><li><p>cert：本地SSL证书路径</p></li></ol><h2 id="2-requests-get-url-params-None-kwargs"><a href="#2-requests-get-url-params-None-kwargs" class="headerlink" title="2. requests.get(url, params=None, \kwargs)"></a>2. requests.get(<strong>url</strong>, <strong>params=None</strong>, <strong><em>\</em>kwargs</strong>)</h2><p><strong>∙</strong> <strong>url</strong> : 拟获取页面的url链接</p><p><strong>∙</strong> <strong>params</strong> : url中的额外参数，字典或字节流格式，可选</p><p><strong>∙</strong> **kwargs: 12个控制访问的参数</p><h2 id="3-requests-head-url-kwargs"><a href="#3-requests-head-url-kwargs" class="headerlink" title="3. requests.head(url, \kwargs)"></a>3. requests.head(<strong>url</strong>, <strong><em>\</em>kwargs</strong>)</h2><p><strong>∙</strong> <strong>url</strong> : 拟获取页面的url链接</p><p><strong>∙</strong> **kwargs: 12个控制访问的参数</p><h2 id="4-requests-post-url-data-None-json-None-kwargs"><a href="#4-requests-post-url-data-None-json-None-kwargs" class="headerlink" title="4. requests.post(url, data=None, json=None, \kwargs)"></a>4. requests.post(<strong>url</strong>, <strong>data=None</strong>, <strong>json=None</strong>, <strong><em>\</em>kwargs</strong>)</h2><p><strong>∙</strong> <strong>url</strong> : 拟更新页面的url链接</p><p><strong>∙</strong> <strong>data</strong> : 字典、字节序列或文件，Request的内容</p><p><strong>∙</strong> <strong>json</strong> : JSON格式的数据，Request的内容</p><p><strong>∙</strong> **kwargs: 12个控制访问的参数</p><h2 id="5-requests-put-url-data-None-kwargs"><a href="#5-requests-put-url-data-None-kwargs" class="headerlink" title="5. requests.put(url, data=None, \kwargs)"></a>5. requests.put(<strong>url</strong>, <strong>data=None</strong>, <strong><em>\</em>kwargs</strong>)</h2><p><strong>∙</strong> <strong>url</strong> : 拟更新页面的url链接</p><p><strong>∙</strong> <strong>data</strong> : 字典、字节序列或文件，Request的内容</p><p><strong>∙</strong> **kwargs: 12个控制访问的参数</p><h2 id="6-requests-patch-url-data-None-kwargs"><a href="#6-requests-patch-url-data-None-kwargs" class="headerlink" title="6. requests.patch(url, data=None, \kwargs)"></a>6. requests.patch(<strong>url</strong>, <strong>data=None</strong>, <strong><em>\</em>kwargs</strong>)</h2><p><strong>∙</strong> <strong>url</strong> : 拟更新页面的url链接</p><p><strong>∙</strong> <strong>data</strong> : 字典、字节序列或文件，Request的内容</p><p><strong>∙</strong> **kwargs: 12个控制访问的参数</p><h2 id="7-requests-delete-url-kwargs"><a href="#7-requests-delete-url-kwargs" class="headerlink" title="7. requests.delete(url, \kwargs)"></a>7. requests.delete(<strong>url</strong>, <strong><em>\</em>kwargs</strong>)</h2><p><strong>∙</strong> <strong>url</strong> : 拟删除页面的url链接</p><p><strong>∙</strong> **kwargs: 12个控制访问的参数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分是python记录爬虫功能的笔记，刚刚入门，总结记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_10(模块和包)</title>
    <link href="http://icewind-r.github.io/2020/06/28/Python-10/"/>
    <id>http://icewind-r.github.io/2020/06/28/Python-10/</id>
    <published>2020-06-28T00:02:19.000Z</published>
    <updated>2020-06-28T11:38:41.897Z</updated>
    
    <content type="html"><![CDATA[<p>基于上次的<strong>异常</strong>基本知识，本篇总结python中<strong>模块</strong>和<strong>包</strong>知识点。</p><a id="more"></a><hr><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>python模块（Module），是一个python文件，以  .py 结尾，包含了python对象定义和python语句。模块能定义函数、类和变量，里面也可以有其他可执行代码。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><h3 id="导入模块方式"><a href="#导入模块方式" class="headerlink" title="导入模块方式"></a>导入模块方式</h3><ul><li>import 模块名</li><li>from 模块名 import 功能名</li><li>from 模块名 import *</li><li>import 模块名 as 别名</li><li>from 模块名 import 功能名 as 别名</li></ul><h3 id="导入方式详解"><a href="#导入方式详解" class="headerlink" title="导入方式详解"></a>导入方式详解</h3><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span>,模块名<span class="number">2.</span>.. <span class="comment"># 不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用功能</span></span><br><span class="line">模块名.功能名()</span><br></pre></td></tr></table></figure></li></ul><h4 id="from-…-import-…"><a href="#from-…-import-…" class="headerlink" title="from … import …"></a>from … import …</h4><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能名<span class="number">1</span>,功能名<span class="number">2.</span>..</span><br></pre></td></tr></table></figure></li><li><p>体验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">print(sqrt(<span class="number">9</span>))</span><br></pre></td></tr></table></figure></li></ul><h4 id="from-模块名-import"><a href="#from-模块名-import" class="headerlink" title="from 模块名 import *"></a>from 模块名 import *</h4><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li><li><p>体验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line">print(sqrt(<span class="number">9</span>))</span><br></pre></td></tr></table></figure></li></ul><h4 id="as-定义别名"><a href="#as-定义别名" class="headerlink" title="as 定义别名"></a>as 定义别名</h4><p>如果定义了别名，只能使用别名，不可再使用模块名。</p><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块定义别名</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能定义别名</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能名 <span class="keyword">as</span> 别名</span><br></pre></td></tr></table></figure></li><li><p>体验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块别名</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> tt</span><br><span class="line"></span><br><span class="line">tt.sleep(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能别名</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> sl</span><br><span class="line">sl(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="制作模块"><a href="#制作模块" class="headerlink" title="制作模块"></a>制作模块</h2><p>在python中，每个python文件都可以作为一个模块，模块的名字就是文件的名字。也就是说自定义模块必须符合标识符命名规则。</p><h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><p>新建一个python文件，命名<code>my_module1.py</code>，并定义<code>testA</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a + b)</span><br></pre></td></tr></table></figure><h3 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h3><p>在实际开发中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，会自行在py文件中添加一些测试信息。例如，在<code>my_module1.py</code>文件中添加测试代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a + b)</span><br><span class="line">    </span><br><span class="line">testA(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>此时，无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行<code>testA</code>函数的调用，即结果2。</p><p>为此，解决方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a + b)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 只有在当前文件调用该函数，其他导入的文件内不符合该条件，则不执行下述测试代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    testA(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>关于 <code>__name__</code>：</p><ul><li><p>若在本文件内运行该函数，则为<code>__main__</code></p></li><li><p>若在其他文件，例如导入该文件模块，则为my_module（文件名）</p></li></ul></blockquote><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在文件夹内创建一个名字为<code>__init__.py</code>文件，那么这个文件夹就称之为<strong>包</strong>。</p><h2 id="制作包"><a href="#制作包" class="headerlink" title="制作包"></a>制作包</h2><p>右键 — [new] — [Python  Package] — 输入包名 — [OK] — 新建功能模块（有联系的模块）。</p><p>注意：新建包后，包内自动创建<code>__init__.py</code>文件，控制着包的导入行为。</p><h3 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h3><ol><li><p>新建包<code>myPackage</code></p></li><li><p>新建包内模块：<code>my_module1</code>和 <code>my_module2</code></p></li><li><p>模块内代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_module1</span></span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_print1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'my_module1'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_module2</span></span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_print2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'my_module2'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"></span><br><span class="line">包名.模块名.目标</span><br></pre></td></tr></table></figure><h4 id="体验-1"><a href="#体验-1" class="headerlink" title="体验"></a>体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myPackage.my_module1</span><br><span class="line"></span><br><span class="line">myPackage.my_module1.info_print1()</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>注意：必须在<code>__init__.py</code>文件中添加<code>__all__ = []</code>，控制允许导入的模块列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> *</span><br><span class="line">模块名.目标</span><br></pre></td></tr></table></figure><h4 id="体验-2"><a href="#体验-2" class="headerlink" title="体验"></a>体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myPackage <span class="keyword">import</span> *</span><br><span class="line">my_module1.info_print1()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于上次的&lt;strong&gt;异常&lt;/strong&gt;基本知识，本篇总结python中&lt;strong&gt;模块&lt;/strong&gt;和&lt;strong&gt;包&lt;/strong&gt;知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_9(异常)</title>
    <link href="http://icewind-r.github.io/2020/06/27/Python-9/"/>
    <id>http://icewind-r.github.io/2020/06/27/Python-9/</id>
    <published>2020-06-27T01:11:20.000Z</published>
    <updated>2020-06-29T12:49:52.529Z</updated>
    
    <content type="html"><![CDATA[<p>基于上次的<strong>面向对象</strong>基本知识，本篇总结python中重要<strong>异常处理</strong>知识点。</p><a id="more"></a><hr><h1 id="异常的写法"><a href="#异常的写法" class="headerlink" title="异常的写法"></a>异常的写法</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    如果出现异常执行的代码</span><br></pre></td></tr></table></figure><h2 id="捕获指定异常"><a href="#捕获指定异常" class="headerlink" title="捕获指定异常"></a>捕获指定异常</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line">    如果捕获到该异常类型执行的代码</span><br></pre></td></tr></table></figure><h3 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(num) <span class="comment"># num不存在</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">'有错误'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获该异常。</li><li>一般try下方只放一行尝试执行的代码。</li></ol></blockquote><h3 id="捕获多个指定异常"><a href="#捕获多个指定异常" class="headerlink" title="捕获多个指定异常"></a>捕获多个指定异常</h3><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放在except后，并使用元组的方式进行书写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError): <span class="comment"># 当不确定异常的类型时，可以选择多个。</span></span><br><span class="line">    print(<span class="string">'有错误'</span>)</span><br></pre></td></tr></table></figure><h3 id="捕获异常描述信息"><a href="#捕获异常描述信息" class="headerlink" title="捕获异常描述信息"></a>捕获异常描述信息</h3><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放在except后，并使用元组的方式进行书写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> result:</span><br><span class="line">    print(result) <span class="comment"># 结果：division by zero</span></span><br></pre></td></tr></table></figure><h3 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h3><p>Exception是所有程序异常类的父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h2 id="异常的else"><a href="#异常的else" class="headerlink" title="异常的else"></a>异常的else</h2><p>else表示的是如果没有异常要执行的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="异常的finally"><a href="#异常的finally" class="headerlink" title="异常的finally"></a>异常的finally</h2><p>finally表示的是无论是否异常都要执行的代码，例如关闭文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">   f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'成功打开'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h1 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'test.txt'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">           time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 如果在读取文件的过程中，产生了异常，那么就会捕获到</span></span><br><span class="line">        <span class="comment"># 比如按下Ctrl + C</span></span><br><span class="line">        print(<span class="string">'意外终止了读取数据'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">'关闭文件'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'打开文件失败'</span>)</span><br></pre></td></tr></table></figure><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>在python中，抛出自定义异常的语法为<code>raise 异常类对象</code>。</p><p>需求：密码长度不足，则报异常（输入密码少于3位，则报错，抛出自定义异常，并捕获该异常）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常类，继承Exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, min_len)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.min_len = min_len</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 设置抛出异常的描述信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'你输入的长度为<span class="subst">&#123;self.length&#125;</span>，不能少于<span class="subst">&#123;self.min_len&#125;</span>个字符'</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = input(<span class="string">'请输入密码：'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(con) &lt; <span class="number">3</span>: <span class="comment"># 即输入密码不符合要求</span></span><br><span class="line">            <span class="keyword">raise</span> ShortInputError(len(con), <span class="number">3</span>) <span class="comment"># 抛出异常 raise</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'密码输入完成'</span>)</span><br></pre></td></tr></table></figure><h1 id="with-…-as"><a href="#with-…-as" class="headerlink" title="with … as"></a>with … as</h1><p>with as 语句的<strong>结构</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> expression [<span class="keyword">as</span> variable]:</span><br><span class="line">    <span class="keyword">with</span>-block</span><br></pre></td></tr></table></figure><p>with…as语句<strong>执行顺序</strong>：<br>–&gt;首先执行expression里面的<code>__enter__</code>函数，它的返回值会赋给<code>as</code>后面的<code>variable</code>，想让它返回什么就返回什么，只要你知道怎么处理就可以了，如果不写<code>as variable</code>，返回值会被忽略。</p><p>–&gt;然后，开始执行<code>with-block</code>中的语句，不论成功失败(比如发生异常、错误，设置sys.exit() )，在<code>with-block</code>执行完成后，会执行<code>expression</code>中的<code>__exit__</code>函数。</p><p>这个和<code>try finally</code>函数有什么关系呢？</p><p>其实，这样的过程<strong>等价</strong>于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    执行 __enter__的内容  </span><br><span class="line">    执行 with_block.  </span><br><span class="line"><span class="keyword">finally</span>:  </span><br><span class="line">    执行 __exit__内容</span><br></pre></td></tr></table></figure><h2 id="简单形式"><a href="#简单形式" class="headerlink" title="简单形式"></a>简单形式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try：</span><br><span class="line">  f &#x3D; open(&#39;a.txt&#39;, &#39;w&#39;)</span><br><span class="line">  f.write(&#39;Hello!&#39;)</span><br><span class="line">finally:</span><br><span class="line">  f.close()</span><br></pre></td></tr></table></figure><p><strong>等价</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&#39;a.txt&#39;, &#39;w&#39;) as f:</span><br><span class="line">  f.write(&#39;Hello!&#39;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于上次的&lt;strong&gt;面向对象&lt;/strong&gt;基本知识，本篇总结python中重要&lt;strong&gt;异常处理&lt;/strong&gt;知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_8(面向对象)</title>
    <link href="http://icewind-r.github.io/2020/06/25/Python-8/"/>
    <id>http://icewind-r.github.io/2020/06/25/Python-8/</id>
    <published>2020-06-25T10:45:31.000Z</published>
    <updated>2020-06-29T10:59:12.010Z</updated>
    
    <content type="html"><![CDATA[<p>基于上次的<strong>文件</strong>基本知识，本篇总结python中重要<strong>面向对象</strong>知识点。</p><a id="more"></a><hr><h1 id="类与对象的创建"><a href="#类与对象的创建" class="headerlink" title="类与对象的创建"></a>类与对象的创建</h1><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p>在不同的python解释器下，类分为两种 <strong>经典类</strong> 和 <strong>新式类</strong></p><ul><li><p>不由任意内置类型派生出的类，称为经典类（python2.0）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名<span class="params">()</span>:</span></span><br><span class="line">    代码</span><br></pre></td></tr></table></figure></li><li><p>新式类（python3.0）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名<span class="params">(object)</span>:</span> <span class="comment"># object 为 python中的顶级类</span></span><br><span class="line">    代码</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 = 类名()</span><br></pre></td></tr></table></figure></li></ul><p><strong>例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wash</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'洗衣服'</span>)</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">haier = Washer() <span class="comment"># 对象名 = 类名()</span></span><br><span class="line">print(haier) <span class="comment"># 打印对象</span></span><br><span class="line">haier.wash() <span class="comment"># 使用方法</span></span><br></pre></td></tr></table></figure><h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><p>self指的是调用函数的对象。</p><p>即上面代码中函数内打印的self和函数外打印的haier相同。</p><h2 id="添加和获取对象属性"><a href="#添加和获取对象属性" class="headerlink" title="添加和获取对象属性"></a>添加和获取对象属性</h2><p>属性即是特征，对象属性既可以在类外面添加和获取，也能在类里面添加和获取。</p><h3 id="类外面添加对象属性"><a href="#类外面添加对象属性" class="headerlink" title="类外面添加对象属性"></a>类外面添加对象属性</h3><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名 = 值</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性名为自定义的</span></span><br><span class="line">haier.width = <span class="number">500</span></span><br><span class="line">haier.height = <span class="number">800</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="类外面获取对象属性"><a href="#类外面获取对象属性" class="headerlink" title="类外面获取对象属性"></a>类外面获取对象属性</h3><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名</span><br></pre></td></tr></table></figure></li></ul><h3 id="类里面获取对象属性"><a href="#类里面获取对象属性" class="headerlink" title="类里面获取对象属性"></a>类里面获取对象属性</h3><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.属性名</span><br></pre></td></tr></table></figure></li></ul><h2 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h2><p>在python中，<code>__xx__()</code>函数叫做魔法方法，指的是与有特殊功能的函数。</p><h3 id="init"><a href="#init" class="headerlink" title="__init__()"></a><code>__init__()</code></h3><h4 id="体验-init"><a href="#体验-init" class="headerlink" title="体验__init__()"></a>体验<code>__init__()</code></h4><p><code>__init__()</code>方法作用：初始化对象，设置与生俱来的初始化属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#定义__init__()，添加实例属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#添加实例属性</span></span><br><span class="line">        self.width = <span class="number">500</span></span><br><span class="line">        self.height = <span class="number">800</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 类里面调用实例属性，注意：不用在该方法内调用`__init__()`方法</span></span><br><span class="line">        print(<span class="string">f'洗衣机的宽度为<span class="subst">&#123;self.width&#125;</span>，高度为<span class="subst">&#123;self.height&#125;</span>'</span>)</span><br><span class="line">        </span><br><span class="line">haier = Washer()</span><br><span class="line">haier.print_info() <span class="comment"># 不用传递参数</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><code>__init__()</code>方法，在创建一个对象时默认被调用。</li><li><code>__init__(self)</code>中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递过去。</li></ul></blockquote><h4 id="带参数的-init"><a href="#带参数的-init" class="headerlink" title="带参数的__init__()"></a>带参数的<code>__init__()</code></h4><p>思考：一个类可以创建多个对象，如何对不同的对象设置不同的初始化属性呢？</p><p>可以使用传递参数的init方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, width, height)</span>:</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'洗衣机的宽度为<span class="subst">&#123;self.width&#125;</span>，高度为<span class="subst">&#123;self.height&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">haier1.print_info()</span><br><span class="line"></span><br><span class="line">haier2 = Washer(<span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line">haier2.print_info()</span><br></pre></td></tr></table></figure><h3 id="str"><a href="#str" class="headerlink" title="__str__()"></a><code>__str__()</code></h3><p>当我们使用print输出对象的时候，默认打印对象的内存地址，如果类定义了<code>__str__()</code>方法，那么就会打印 从这个方法中return的数据。</p><blockquote><p>该方法一般用于返回一些解释说明的语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, width, height)</span>:</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'这是海尔洗衣机的说明书'</span> </span><br><span class="line"></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">print(haier1) <span class="comment"># 这是海尔洗衣机的说明书</span></span><br></pre></td></tr></table></figure><h3 id="del"><a href="#del" class="headerlink" title="__del__()"></a><code>__del__()</code></h3><p>当删除对象时，python解释器就会默认调用该方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, width, height)</span>:</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self&#125;</span>对象已经被销毁'</span>)</span><br><span class="line">  </span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> haier1</span><br></pre></td></tr></table></figure><p><strong>拓展</strong><br>我们都知道Python一切皆对象，那么Python究竟是怎么管理对象的呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="comment"># 返回类内部所有属性和方法对应的字典</span></span><br><span class="line">print(A.__dict__)</span><br><span class="line"><span class="comment"># 返回实例属性和值组成的字典</span></span><br><span class="line">print(a.__dict__)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'__init__'</span>: &lt;function A.__init__ at <span class="number">0x01719610</span>&gt;, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'A'</span> objects&gt;, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'A'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><p>由此可见， 类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在<strong>类<strong>dict</strong></strong>里的。</p></li><li><p><strong>对象的<strong>dict</strong></strong>中存储了一些self.xxx的一些东西</p></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>Python面向对象的继承指的是多个类之间的所属关系，即子类默认继承父类的所有属性和方法，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.num = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info_print</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span> <span class="comment"># 继承写法</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">result = B()</span><br><span class="line">result.info_print() <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>继承分为单继承和多继承两种。</p><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><p>只有一个父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>有多个父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</p></blockquote><p><strong>拓展：</strong>查看一个类的层级继承关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(类.__mro__)</span><br></pre></td></tr></table></figure><h2 id="子类调用父类同名方法和属性"><a href="#子类调用父类同名方法和属性" class="headerlink" title="子类调用父类同名方法和属性"></a>子类调用父类同名方法和属性</h2><p>通过师傅徒弟案例和学校的多继承完成演示（相应含义已在注释部分说明）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 师傅类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.kongfu =  <span class="string">'经典配方'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'运用的技术：<span class="subst">&#123;self.kongfu&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学校类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.kongfu = <span class="string">'新式配方'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'运用的技术：<span class="subst">&#123;self.kongfu&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 徒弟类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span><span class="params">(School, Master)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.kongfu = <span class="string">'独创配方'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 加入自己的init方法原因：如果先调用了父类的属性和方法，父类属性回覆盖子类属性</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        print(<span class="string">f'运用的技术：<span class="subst">&#123;self.kongfu&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类调用父类的同名方法和属性：即把父类的同名方法和属性再次封装</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 父类名.函数</span></span><br><span class="line">        Master.__init__(self) <span class="comment"># 调用初始化的原因：这里想要调用父类的同名方法和属性，属性在父类的init方法中被初始化，所以此处再次调用</span></span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 父类名.函数</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line">daqiu.make_master_cake()</span><br><span class="line">daqiu.make_school_cake()</span><br></pre></td></tr></table></figure><h2 id="super-函数"><a href="#super-函数" class="headerlink" title="super()函数"></a>super()函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">super().__init__()</span><br><span class="line">super().make_cake()</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用super()可以自动查找父类。调用顺序遵循<code>__mro__</code>的类属性顺序。比较适合单继承使用。</p></blockquote><h1 id="私有权限"><a href="#私有权限" class="headerlink" title="私有权限"></a>私有权限</h1><h2 id="定义私有属性和方法"><a href="#定义私有属性和方法" class="headerlink" title="定义私有属性和方法"></a>定义私有属性和方法</h2><p>设置私有权限的方法：在属性名 和 方法名 前面 加上两个下划线__。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.kongfu = <span class="string">'独创配方'</span></span><br><span class="line">    <span class="comment"># 定义私有属性</span></span><br><span class="line">    self.__money = <span class="number">200</span></span><br><span class="line"><span class="comment"># 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__info_print</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.__money)</span><br></pre></td></tr></table></figure><blockquote><p>注意：私有属性和私有方法只能在类里面访问和修改</p></blockquote><h2 id="获取和修改私有属性"><a href="#获取和修改私有属性" class="headerlink" title="获取和修改私有属性"></a>获取和修改私有属性</h2><p>自定义get和set方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_money</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.__money</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_money</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.__money = <span class="number">100</span></span><br></pre></td></tr></table></figure><h1 id="保护权限"><a href="#保护权限" class="headerlink" title="保护权限"></a>保护权限</h1><p>以单下划线开头。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="面向对象的三个特性"><a href="#面向对象的三个特性" class="headerlink" title="面向对象的三个特性"></a>面向对象的三个特性</h2><ul><li>封装<ul><li>将属性和方法书写到类里的操作</li><li>封装可以为属性和方法添加私有权限</li></ul></li><li>继承<ul><li>默认继承父类的所有属性和方法</li><li>子类可以重写父类的属性和方法</li></ul></li><li>多态<ul><li>传入不同的对象，产生不同的结果</li></ul></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArmyDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'追击敌人'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrugDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'追查毒品'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_with_dog</span><span class="params">(self, dog)</span>:</span></span><br><span class="line">        dog.work()</span><br><span class="line"></span><br><span class="line">ad = ArmyDog()</span><br><span class="line">dd = DrugDog()</span><br><span class="line">person1 = Person()</span><br><span class="line"><span class="comment"># 多态调用</span></span><br><span class="line">person1.work_with_dog(ad) <span class="comment"># 追击敌人</span></span><br><span class="line">person1.work_with_dog(dd) <span class="comment"># 追查毒品</span></span><br></pre></td></tr></table></figure><h2 id="类属性和实例属性"><a href="#类属性和实例属性" class="headerlink" title="类属性和实例属性"></a>类属性和实例属性</h2><h3 id="设置和访问类属性"><a href="#设置和访问类属性" class="headerlink" title="设置和访问类属性"></a>设置和访问类属性</h3><ul><li>类属性就是 <strong>类对象</strong> 所拥有的属性，它被 <strong>该类的所有实例对象</strong> 所共有。</li><li>类属性可以使用 <strong>类对象</strong> 或 <strong>实例对象</strong> 访问。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    tooth = <span class="number">10</span> <span class="comment"># 设置类属性</span></span><br><span class="line"></span><br><span class="line">dog1 = Dog()</span><br><span class="line">dog2 = Dog()</span><br><span class="line"></span><br><span class="line">print(Dog.tooth)</span><br><span class="line">print(dog1.tooth)</span><br><span class="line">print(dog2.tooth)</span><br></pre></td></tr></table></figure><blockquote><p>类属性的优点：</p><ul><li>记录的某项数据始终保持一致，则定义类属性。</li><li>实例属性要求 <strong>每个对象 *<em>为其 单独开辟一份内存空间 来记录数据，而 *</em>类属性</strong> 为全人类所共有，仅占用一份内存，更加节省内存空间。</li></ul></blockquote><h3 id="修改类属性"><a href="#修改类属性" class="headerlink" title="修改类属性"></a>修改类属性</h3><p>类属性只能通过类对象修改，不能通过实例对象修改，如果通过实例对象修改类属性，表示的是创建了一个实例属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改实例属性</span></span><br><span class="line">Dog.tooth = <span class="number">12</span></span><br><span class="line"><span class="comment"># 修改实例属性</span></span><br><span class="line">dog1.tooth = <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="类方法和静态方法"><a href="#类方法和静态方法" class="headerlink" title="类方法和静态方法"></a>类方法和静态方法</h2><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><ul><li><p>特点</p><p>需要用<strong>装饰器</strong><code>@classmethod</code>；来标识其为类方法，对于类方法，第一个参数必须为类对象，一半以<code>cls</code>作为第一个参数。</p></li><li><p>使用场景</p><p>当方法中需要使用类对象（如访问私有类属性等）时，定义类方法</p><p>类方法一般和类属性配合使用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    __touth = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_tooth</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.__tooth</span><br><span class="line">    </span><br><span class="line">dog1 = Dog()</span><br><span class="line">result = dog1.get_tooth()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li><p>特点</p><p>需要通过装饰器 <code>@staticmethod</code>来进行修饰，静态方法既不需要传递类对象，也不需要传递实例对象（形参没有self/cls）。</p><p>静态方法也能通过 <strong>实例对象</strong> 和 <strong>类对象</strong> 去访问。</p></li><li><p>使用场景</p><p>当方法中既不需要使用实例对象，也不需要使用类对象时，定义静态方法。</p><p>取消不需要的参数传递，有利于 减少不必要的内存占用和性能消耗。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info_print</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'该类用于创建Dog'</span>)</span><br><span class="line">    </span><br><span class="line">dog1 = Dog()</span><br><span class="line"><span class="comment"># 静态方法既可以使用对象访问，又可以使用类访问</span></span><br><span class="line">dog1.info_print()</span><br><span class="line">Dog.info_print()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于上次的&lt;strong&gt;文件&lt;/strong&gt;基本知识，本篇总结python中重要&lt;strong&gt;面向对象&lt;/strong&gt;知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_7(文件)</title>
    <link href="http://icewind-r.github.io/2020/06/24/Python-7/"/>
    <id>http://icewind-r.github.io/2020/06/24/Python-7/</id>
    <published>2020-06-24T13:56:11.000Z</published>
    <updated>2020-06-29T12:59:58.994Z</updated>
    
    <content type="html"><![CDATA[<p>基于上次的<strong>函数</strong>基本知识，本篇总结python中<strong>文件</strong>的相关操作。</p><a id="more"></a><hr><h1 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h1><ol><li>打开文件</li><li>读写等操作</li><li>关闭文件</li></ol><h2 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h2><p>在python中，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(name, mode, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><ul><li>name：是要打开的目标文件名的字符串（可以包含具体路径）</li><li>mode：设置打开文件的模式（访问模式）：只读、只写、追加等</li><li>encoding：指定编码</li></ul><h2 id="打开文件模式"><a href="#打开文件模式" class="headerlink" title="打开文件模式"></a>打开文件模式</h2><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><blockquote><p>注意：</p><ul><li>只要带 b 的，都是 以二进制格式打开文件</li><li>带 + 的，打开文件用于读写</li><li>a ，文件指针在结尾</li></ul></blockquote><img src="/2020/06/24/Python-7/1.png" class><blockquote><p> 注：</p><ul><li>Truncate：截断</li><li>Initial Position：初始位置</li></ul></blockquote><p><strong>使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>) <span class="comment"># f代表文件对象</span></span><br></pre></td></tr></table></figure><h2 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h2><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.write(<span class="string">'内容'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><ul><li><p><strong>read</strong>()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.read(num)</span><br></pre></td></tr></table></figure><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），可省略</p></blockquote></li><li><p><strong>readlines</strong>()</p><p>readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每行的数据为一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>)</span><br><span class="line">content = f.readlines() <span class="comment"># ['aa\n','bb\n','cc']</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>readline</strong>()</p><p>一次读取一行内容</p></li></ul><h3 id="移动文件指针-seek"><a href="#移动文件指针-seek" class="headerlink" title="移动文件指针__seek()"></a>移动文件指针__seek()</h3><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.seek(偏移量, 起始位置)</span><br></pre></td></tr></table></figure><blockquote><p>起始位置：</p><ul><li>0：文件开头</li><li>1：当前位置</li><li>2：文件结尾</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test,txt'</span>, <span class="string">'r+'</span>)</span><br><span class="line">f.seek(<span class="number">2</span>, <span class="number">0</span>) <span class="comment"># 从开头位置，偏移两个字符，即第三个字符开始读取</span></span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment">#  &lt;=&gt; seek(0, 0),即从文件的最开始读取</span></span><br></pre></td></tr></table></figure><h1 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h1><p>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能（test[备份].txt）</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>接收用户输入的文件名</li><li>规划备份文件名</li><li>备份文件写入数据</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li><p>接受用户输入目标文件名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">old_name = input(<span class="string">'请输入您要备份的文件名：'</span>)</span><br></pre></td></tr></table></figure></li><li><p>规划备份文件名</p><ul><li>提取目标文件后缀（字符串最后的一个点才是后缀的点）</li><li>组织备份的文件名，xx[备份]后缀</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以sound.txt.mp3文件名为例</span></span><br><span class="line"></span><br><span class="line">index = old_name.rfind(<span class="string">'.'</span>)<span class="comment"># 提取文件后缀名中“.”的下标   9</span></span><br><span class="line"><span class="comment"># old_name[:index]  源文件名（无后缀）   sound.txt</span></span><br><span class="line"><span class="comment"># old_name[index:]  后缀名.mp3</span></span><br><span class="line"></span><br><span class="line">new_name = old_name[:index] + <span class="string">'[备份]'</span> + old_name[index:]</span><br></pre></td></tr></table></figure></li><li><p>备份文件写入数据</p><ul><li>打开源文件 和 备份文件</li><li>将源文件数据写入备份文件</li><li>关闭文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">old_f = open(old_name, <span class="string">'rb'</span>) <span class="comment"># 以二进制的方式读写</span></span><br><span class="line">new_f = open(new_name, <span class="string">'wb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> len(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">#表示读完，退出循环</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line">    </span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br></pre></td></tr></table></figure></li></ol><h1 id="文件和文件夹的操作"><a href="#文件和文件夹的操作" class="headerlink" title="文件和文件夹的操作"></a>文件和文件夹的操作</h1><p>在python中文件和文件夹的操作要借助os模板里面的相关功能，具体步骤如下：</p><ol><li><p>导入os模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure></li><li><p>使用os模块相关功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.函数名()</span><br></pre></td></tr></table></figure></li></ol><h2 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rename(目标文件名, 新文件名)</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(目标文件名)</span><br></pre></td></tr></table></figure><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(文件夹名字)</span><br></pre></td></tr></table></figure><h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(文件夹名字)</span><br></pre></td></tr></table></figure><h2 id="获取当前目录"><a href="#获取当前目录" class="headerlink" title="获取当前目录"></a>获取当前目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><h2 id="改变默认目录"><a href="#改变默认目录" class="headerlink" title="改变默认目录"></a>改变默认目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(目录)</span><br></pre></td></tr></table></figure><p><strong>需求</strong>：在A文件夹里创建B文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(<span class="string">'A'</span>)</span><br><span class="line">os.mkdir(<span class="string">'B'</span>)</span><br></pre></td></tr></table></figure><h2 id="获取目录列表"><a href="#获取目录列表" class="headerlink" title="获取目录列表"></a>获取目录列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.listdir(目录) <span class="comment">#获取该目录下的所有文件，返回一个列表</span></span><br></pre></td></tr></table></figure><p><strong>例子</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(os.listdir(<span class="string">'A'</span>)) <span class="comment"># B</span></span><br></pre></td></tr></table></figure><h1 id="读取JSON文件"><a href="#读取JSON文件" class="headerlink" title="读取JSON文件"></a>读取JSON文件</h1><p>我们使用Python中的json模块就可以将字典或列表以JSON格式保存到文件中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    mydict = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'张三'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">38</span>,</span><br><span class="line">        <span class="string">'qq'</span>: <span class="number">957658</span>,</span><br><span class="line">        <span class="string">'friends'</span>: [<span class="string">'王大锤'</span>, <span class="string">'白元芳'</span>],</span><br><span class="line">        <span class="string">'cars'</span>: [</span><br><span class="line">            &#123;<span class="string">'brand'</span>: <span class="string">'BYD'</span>, <span class="string">'max_speed'</span>: <span class="number">180</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'brand'</span>: <span class="string">'Audi'</span>, <span class="string">'max_speed'</span>: <span class="number">280</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'brand'</span>: <span class="string">'Benz'</span>, <span class="string">'max_speed'</span>: <span class="number">320</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fs:</span><br><span class="line">            json.dump(mydict, fs)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">'保存数据完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>json模块主要有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul><p>这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书<a href="https://zh.wikipedia.org/" target="_blank" rel="noopener">维基百科</a>上对这两个概念是这样解释的：</p><ul><li>序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。</li><li>与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于上次的&lt;strong&gt;函数&lt;/strong&gt;基本知识，本篇总结python中&lt;strong&gt;文件&lt;/strong&gt;的相关操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_6(函数lambda高阶用法)</title>
    <link href="http://icewind-r.github.io/2020/06/23/Python-6/"/>
    <id>http://icewind-r.github.io/2020/06/23/Python-6/</id>
    <published>2020-06-23T09:13:23.000Z</published>
    <updated>2020-06-24T10:51:45.444Z</updated>
    
    <content type="html"><![CDATA[<p>基于上次的<strong>公共操作</strong>和简单的<strong>推导式</strong>运算，本次学习<strong>函数</strong>的相关知识。</p><a id="more"></a><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数基本形式"><a href="#函数基本形式" class="headerlink" title="函数基本形式"></a>函数基本形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="string">""" </span></span><br><span class="line"><span class="string">    说明文档内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    代码</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="comment"># 调用时，help(f)查看说明文档</span></span><br></pre></td></tr></table></figure><h2 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h2><p>如何在函数体内修改全局变量？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span><span class="params">()</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#global 关键字声明a是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><ul><li><p>返回多个值，<code>return a,b</code>，默认是返回元组类型</p></li><li><p>return后面可以连接列表、元组或字典，以返回多个值</p></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>调用有参数的函数时，参数可有多种方式写入。</p><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(name, age, gender)</span>:</span></span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">user_info(<span class="string">'Tom'</span>, <span class="number">20</span>, <span class="string">'男'</span>)</span><br><span class="line">user_info(<span class="string">'小明'</span>, gender=<span class="string">'男'</span>, age=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h3 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a><strong>缺省参数</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(name, age, gender=<span class="string">'男'</span>)</span>:</span></span><br><span class="line">    print()</span><br><span class="line"><span class="comment">#带有缺省值的参数可以不输入</span></span><br><span class="line">user_info(<span class="string">'Tom'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><ul><li>包裹位置传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    </span><br><span class="line">user_info(<span class="string">'Tom'</span>, <span class="number">18</span>) <span class="comment"># ('Tom',18)</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组（tuple）。</p></blockquote><ul><li>包裹关键字传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">    </span><br><span class="line">user_info(name=<span class="string">'Tom'</span>,age=<span class="number">18</span>) <span class="comment"># &#123;'name': 'Tom','age': 18&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程</p></blockquote><h2 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h2><ul><li><p>元组拆包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line">num1, num2 = return_num()</span><br></pre></td></tr></table></figure></li><li><p>字典拆包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">a, b = dict1</span><br><span class="line"></span><br><span class="line"><span class="comment">#对字典进行拆包，取出来的是字典的key</span></span><br><span class="line">print(a) <span class="comment"># name</span></span><br><span class="line">print(b) <span class="comment"># age</span></span><br><span class="line"></span><br><span class="line">print(dict1[a]) <span class="comment">#Tom</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="交换变量值"><a href="#交换变量值" class="headerlink" title="交换变量值"></a>交换变量值</h2><ul><li><p>定义第三变量传值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = a</span><br><span class="line">a = b</span><br><span class="line">b = c</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span> <span class="comment"># 把1和2分别赋值给a和b</span></span><br><span class="line">b, a = a, b</span><br></pre></td></tr></table></figure></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在python中，值是靠引用传递的。</p><p>可以用方法<code>id(变量)</code> ，得到变量的地址</p><p>int数据类型不可变（数值改变地址改变），列表数据类型可变（数值改变地址不变）</p><h3 id="可变和不可变类型"><a href="#可变和不可变类型" class="headerlink" title="可变和不可变类型"></a>可变和不可变类型</h3><p>所谓可变不可变：即该数据能否直接修改，如果直接修改那么可变（不改变内存地址），否则不可变。</p><ul><li>可变类型<ul><li>列表</li><li>字典</li><li>集合</li></ul></li><li>不可变类型<ul><li>整型</li><li>浮点型</li><li>字符串</li><li>元组</li></ul></li></ul><h1 id="lambda表达式（匿名函数）"><a href="#lambda表达式（匿名函数）" class="headerlink" title="lambda表达式（匿名函数）"></a>lambda表达式（匿名函数）</h1><p>如果一个函数有一个返回值，并且只有一句代码，可以使用lambda简化。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表 : 表达式</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><p>lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用</p></li><li><p>lambda表达式能接受任何数量的参数但只能返回一个表达式的值</p></li></ul></blockquote><h2 id="lambda的参数形式"><a href="#lambda的参数形式" class="headerlink" title="lambda的参数形式"></a>lambda的参数形式</h2><h3 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lambda表达式</span></span><br><span class="line">fn2 = <span class="keyword">lambda</span>: <span class="number">100</span></span><br><span class="line">print(fn2) <span class="comment"># lambda内存地址</span></span><br><span class="line">print(fn2()) <span class="comment"># 对应的函数的返回值</span></span><br></pre></td></tr></table></figure><h3 id="有参"><a href="#有参" class="headerlink" title="有参"></a>有参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算a + b</span></span><br><span class="line"><span class="comment"># 函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#lambda实现</span></span><br><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line">print(fn1(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a = <span class="number">0</span>, b = <span class="number">0</span>: a + b</span><br></pre></td></tr></table></figure><h3 id="可变参数：-args"><a href="#可变参数：-args" class="headerlink" title="可变参数：*args"></a>可变参数：*args</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> *args: args</span><br><span class="line">print(fn1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的可变参数传入到lambda中，返回的类型为元组</p></blockquote><h3 id="可变参数：-kwargs"><a href="#可变参数：-kwargs" class="headerlink" title="可变参数：**kwargs"></a>可变参数：**kwargs</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> **kwargs: kwargs</span><br><span class="line">print(fn1(name = <span class="string">'python'</span>, age = <span class="number">20</span>))</span><br></pre></td></tr></table></figure><blockquote><p>返回字典类型。</p></blockquote><p>以上与函数部分的规则完全一致。</p><h2 id="lambda的应用"><a href="#lambda的应用" class="headerlink" title="lambda的应用"></a>lambda的应用</h2><h3 id="带判断的lambda"><a href="#带判断的lambda" class="headerlink" title="带判断的lambda"></a>带判断的lambda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line">print(fn1(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="列表数据按字典key的值排序"><a href="#列表数据按字典key的值排序" class="headerlink" title="列表数据按字典key的值排序"></a>列表数据按字典key的值排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'Rose'</span>, <span class="string">'age'</span>: <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'Jack'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按name值升序排序</span></span><br><span class="line">students.sort(key = <span class="keyword">lambda</span> x: x[<span class="string">'name'</span>])</span><br><span class="line">print(students)</span><br><span class="line"><span class="comment"># sort函数：如果要排序的列表里数据为字典，则指定key值则可排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按name值降序排序</span></span><br><span class="line">students.sort(key = <span class="keyword">lambda</span> x: x[<span class="string">'name'</span>], reverse = <span class="literal">True</span>)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>把函数作为参数传入，这样的函数为高阶函数。高阶函数是函数式编程的体现，高度抽象的编程范式。</p><p><strong>示例</strong>：任意两个数字，求绝对值abs（或四舍五入 round）后进行求和。</p><ul><li><p>方法1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> abs(a) + abs(b)</span><br><span class="line">result = add_num(<span class="number">-1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>方法2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span><span class="params">(a, b, f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(a) + f(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#灵活性变高</span></span><br><span class="line">result = sum_num(<span class="number">-1</span>, <span class="number">2</span>, abs)</span><br><span class="line">result = sum_num(<span class="number">-1</span>, <span class="number">2</span>, round)</span><br></pre></td></tr></table></figure></li></ul><h2 id="内置高阶函数"><a href="#内置高阶函数" class="headerlink" title="内置高阶函数"></a>内置高阶函数</h2><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p><code>map(func, lst)</code>，将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的迭代器返回。</p><p><strong>例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">result = map(func, list1) </span><br><span class="line">print(result) <span class="comment">#为地址</span></span><br><span class="line">print(list(result)) <span class="comment"># list()，将数据转换为列表 [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p><code>reduce(func, lst)</code>，其中func必须有<strong>两个</strong>参数。每次func计算的结果继续和序列的下一个元素做累计计算。</p><p><strong>例子：</strong>计算list1序列中各个数字的累加和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools <span class="comment"># 导入reduce所需的functools模块</span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">result = functools.reduce(func, list1)</span><br><span class="line">print(result) <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter(func,lst)</code>函数用于过滤序列，过滤掉不符合条件的元素，返回一个filter对象，如果转换为列表类型，用<code>list()</code>来转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">result = filter(func, list1)</span><br><span class="line"></span><br><span class="line">print(result) <span class="comment"># filter对象</span></span><br><span class="line">print(list(result)) <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于上次的&lt;strong&gt;公共操作&lt;/strong&gt;和简单的&lt;strong&gt;推导式&lt;/strong&gt;运算，本次学习&lt;strong&gt;函数&lt;/strong&gt;的相关知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_5(公共操作推导式)</title>
    <link href="http://icewind-r.github.io/2020/06/23/Python-5/"/>
    <id>http://icewind-r.github.io/2020/06/23/Python-5/</id>
    <published>2020-06-23T01:29:50.000Z</published>
    <updated>2020-06-24T10:52:37.250Z</updated>
    
    <content type="html"><![CDATA[<p>基于上次的<strong>字典</strong>和<strong>集合</strong>，本次总结python中的一些<strong>公共操作</strong>和简单的<strong>推导式</strong>运算。</p><a id="more"></a><hr><h1 id="一、公共操作"><a href="#一、公共操作" class="headerlink" title="一、公共操作"></a>一、公共操作</h1><h2 id="1、运算符"><a href="#1、运算符" class="headerlink" title="1、运算符"></a>1、运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>支持的容器类型</th></tr></thead><tbody><tr><td>+</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>复制</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>not in</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *复制运算符</span></span><br><span class="line">str = <span class="string">'hello'</span></span><br><span class="line">list = [<span class="string">'world'</span>]</span><br><span class="line">t = (<span class="string">'world'</span>,)</span><br><span class="line">print(str * <span class="number">5</span>) <span class="comment"># 'hellohellohellohellohello'</span></span><br><span class="line">print(list * <span class="number">5</span>) <span class="comment"># ['world','world','world','world','world']</span></span><br><span class="line">print(t * <span class="number">5</span>) <span class="comment"># ('world','world','world','world','world')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'h'</span> <span class="keyword">in</span> str) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="2、公共方法"><a href="#2、公共方法" class="headerlink" title="2、公共方法"></a>2、公共方法</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start,end,step)</td><td>生成从start到end的数字（可迭代对象），步长为step，供for循环使用</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象（如列表、元组或字符串）组合为一个索引序列，同时列出数据和数据下标，一般在for循环当中。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'hello'</span></span><br><span class="line">list = [<span class="string">'world'</span>]</span><br><span class="line">t = (<span class="string">'world'</span>,)</span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'Tom'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="len-和-del"><a href="#len-和-del" class="headerlink" title="len() 和 del()"></a>len() 和 del()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">len(str) <span class="comment"># 5</span></span><br><span class="line">len(dict) <span class="comment">#2 字典的一个键值对记为长度1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span>(str)</span><br><span class="line"><span class="keyword">del</span>(dict[<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure><h3 id="max-和-min"><a href="#max-和-min" class="headerlink" title="max() 和 min()"></a>max() 和 min()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max(str)</span><br><span class="line">min(s)</span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><blockquote><p>注意：range()生成的序列不包含end数字。</p><p>如果不写开始，默认从0开始</p><p>如果不写步长，默认为1</p></blockquote><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h3><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enumerate(可遍历对象,start = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。</p></blockquote></li><li><p>enumerate 返回结果是元组，元组第一个数据是原迭代对象的数据对应的下标，第二个为对应的 数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enumerate(list):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> index, char <span class="keyword">in</span> enumerate(list, start = <span class="number">1</span>):</span><br><span class="line">    print(<span class="string">f'下标是<span class="subst">&#123;index&#125;</span>，对应的字符是<span class="subst">&#123;char&#125;</span>'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、容器类型转换"><a href="#3、容器类型转换" class="headerlink" title="3、容器类型转换"></a>3、容器类型转换</h2><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple()"></a>tuple()</h3><p>作用：将某个序列转换成元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">tuple(list) <span class="comment"># (1,2,3)</span></span><br></pre></td></tr></table></figure><h1 id="二、推导式"><a href="#二、推导式" class="headerlink" title="二、推导式"></a>二、推导式</h1><p>作用：主要为化简代码。</p><h2 id="1、列表推导式"><a href="#1、列表推导式" class="headerlink" title="1、列表推导式"></a>1、列表推导式</h2><p>作用：用一个表达式创建一个有规律的列表或控制一个有规律的列表。</p><h4 id="1、带for循环的列表推导式"><a href="#1、带for循环的列表推导式" class="headerlink" title="1、带for循环的列表推导式"></a>1、带for循环的列表推导式</h4><p>例题：创建从0~9的顺序列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><h4 id="2、带if的列表推导式"><a href="#2、带if的列表推导式" class="headerlink" title="2、带if的列表推导式"></a>2、带if的列表推导式</h4><p>例题：创建从0~9的偶数列表</p><ul><li><p>方法1：range()步长实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)]</span><br></pre></td></tr></table></figure></li><li><p>方法2：if实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、多个for循环实现列表推导式"><a href="#3、多个for循环实现列表推导式" class="headerlink" title="3、多个for循环实现列表推导式"></a>3、多个for循环实现列表推导式</h4><p>例题：创建列表如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通实现</span></span><br><span class="line">list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        list.append((i,j)) <span class="comment">#列表里添加元组</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#推导式</span></span><br><span class="line">list = [(i,j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>将普通实现的方法按照顺序写入列表方括号里，输出项提前即可</p></blockquote><h2 id="2、字典推导式"><a href="#2、字典推导式" class="headerlink" title="2、字典推导式"></a>2、字典推导式</h2><p>作用：快速合并列表为字典或提取字典中目标数据</p><p>案例：</p><p>1、创建一个字典：字典key是1-5，value是这个数的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;i : i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)&#125; <span class="comment">#&#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br></pre></td></tr></table></figure><p>2、将两个列表合并为一个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'gender'</span>]</span><br><span class="line">list2 = [<span class="string">'Tom'</span>,<span class="number">20</span>,<span class="string">'男'</span>]</span><br><span class="line">dict = &#123;list1[i]: list2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list1))&#125;</span><br></pre></td></tr></table></figure><p>3、提取字典中的目标数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">counts = &#123;<span class="string">'MBP'</span>: <span class="number">268</span>, <span class="string">'HP'</span>: <span class="number">125</span>, <span class="string">'DELL'</span>: <span class="number">201</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求：提取上述电脑数量大于等于200的字典数据</span></span><br><span class="line">count1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> counts.items() <span class="keyword">if</span> value &gt;= <span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3、集合推导式"><a href="#3、集合推导式" class="headerlink" title="3、集合推导式"></a>3、集合推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">#需求：创建一个集合，数据为下方列表的2次方</span></span><br><span class="line">set1 = &#123;<span class="number">1</span> ** <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">in</span> list1&#125; <span class="comment">#&#123;1, 4&#125; 集合的去重功能</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于上次的&lt;strong&gt;字典&lt;/strong&gt;和&lt;strong&gt;集合&lt;/strong&gt;，本次总结python中的一些&lt;strong&gt;公共操作&lt;/strong&gt;和简单的&lt;strong&gt;推导式&lt;/strong&gt;运算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_4(字典元组)</title>
    <link href="http://icewind-r.github.io/2020/06/22/Python-4/"/>
    <id>http://icewind-r.github.io/2020/06/22/Python-4/</id>
    <published>2020-06-22T11:52:42.000Z</published>
    <updated>2020-06-29T06:29:45.256Z</updated>
    
    <content type="html"><![CDATA[<p>基于上次的<strong>列表</strong>和<strong>元组</strong>，这次总结<strong>字典</strong>和<strong>集合</strong>的基本操作</p><a id="more"></a><hr><h1 id="一、字典"><a href="#一、字典" class="headerlink" title="一、字典"></a>一、字典</h1><p>字典的数据是以键值对形式出现。</p><h2 id="1、创建字典"><a href="#1、创建字典" class="headerlink" title="1、创建字典"></a>1、创建字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'name'</span>:<span class="string">'Tom'</span>,<span class="string">'age'</span>:<span class="number">20</span>,<span class="string">'gender'</span>:<span class="string">'男'</span>&#125; <span class="comment">#有数据字典</span></span><br><span class="line">dict2 = &#123;&#125; <span class="comment">#空字典</span></span><br><span class="line">dict3 = dict() <span class="comment">#空字典</span></span><br></pre></td></tr></table></figure><h2 id="2、字典常见操作"><a href="#2、字典常见操作" class="headerlink" title="2、字典常见操作"></a>2、字典常见操作</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>写法：<code>字典序列[key] = 值</code></p><blockquote><p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对</p></blockquote><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>del() / del：删除字典或字典中指定键值对</li><li>clear()：清空字典</li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>字典序列[key] = 值</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="key值查找"><a href="#key值查找" class="headerlink" title="key值查找"></a>key值查找</h4><p><code>dict1[&#39;name&#39;]</code></p><blockquote><p>如果key存在则返回相应值；否则报错</p></blockquote><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><ul><li><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典序列.get(key, 默认值)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果当前查找的key不存在，则返回第二个参数，如果省略第二个参数，则返回None</p></blockquote></li></ul><h4 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h4><p>查找字典中所有的key，返回可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dict1.keys()) <span class="comment"># dict_keys(['name','age','gender'])</span></span><br></pre></td></tr></table></figure><h4 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h4><p>查找字典中所有的value，返回可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dict1.values()) <span class="comment"># dict_values(['Tom','20','男'])</span></span><br></pre></td></tr></table></figure><h4 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h4><p>查找字典中所有的键值对，返回可迭代对象，里面的数据是元组，元组数据1是key，2是value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dict1.items()) <span class="comment"># dict_items([('name','Tom'),('age',20),('gender','男')])</span></span><br></pre></td></tr></table></figure><h2 id="3、字典的循环遍历"><a href="#3、字典的循环遍历" class="headerlink" title="3、字典的循环遍历"></a>3、字典的循环遍历</h2><h3 id="遍历字典的key"><a href="#遍历字典的key" class="headerlink" title="遍历字典的key"></a>遍历字典的key</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    print(key)</span><br><span class="line"><span class="comment"># 结果：name age gender</span></span><br></pre></td></tr></table></figure><h3 id="遍历字典的value"><a href="#遍历字典的value" class="headerlink" title="遍历字典的value"></a>遍历字典的value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():</span><br><span class="line">print(value)</span><br><span class="line"><span class="comment"># 结果 Tom 20 男</span></span><br></pre></td></tr></table></figure><h3 id="遍历字典的元素"><a href="#遍历字典的元素" class="headerlink" title="遍历字典的元素"></a>遍历字典的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict1.items():</span><br><span class="line">    print(item)</span><br><span class="line">结果 (<span class="string">'name'</span>,<span class="string">'tom'</span>) (<span class="string">'age'</span>,<span class="number">20</span>) (<span class="string">'gender'</span>,<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure><h3 id="遍历字典的键值对-拆包"><a href="#遍历字典的键值对-拆包" class="headerlink" title="遍历字典的键值对(拆包)"></a>遍历字典的键值对(拆包)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h1 id="二、集合"><a href="#二、集合" class="headerlink" title="二、集合"></a>二、集合</h1><h2 id="1、创建集合"><a href="#1、创建集合" class="headerlink" title="1、创建集合"></a>1、创建集合</h2><p>创建集合使用<code>{}</code>或<code>set()</code>，但是如果要创建空集合只能使用set()，因为<code>{}</code>用来创建空字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2 = set(<span class="string">'ads'</span>)</span><br><span class="line">s3 = set() <span class="comment"># set</span></span><br><span class="line">s4 = &#123;&#125; <span class="comment">#dict</span></span><br></pre></td></tr></table></figure><h2 id="2、操作"><a href="#2、操作" class="headerlink" title="2、操作"></a>2、操作</h2><h3 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h3><ul><li><p>add()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s1.add(<span class="number">3</span>)</span><br><span class="line">s1.add(<span class="number">1</span>) <span class="comment"># &#123;1,2,3&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>集合有去重功能，所以当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote></li><li><p>update()：追加的数据是序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s1.update(<span class="number">3</span>) <span class="comment">#报错 </span></span><br><span class="line">s1.update([<span class="number">100</span>,<span class="number">200</span>])</span><br><span class="line">s1.update(<span class="string">'abc'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><ul><li>remove()：删除指定数据，如果数据不存在报错</li><li>discard()：删除指定数据，如果数据不存在不报错</li><li>pop()：随机删除某个数据，并返回该值</li></ul><h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><ul><li>in</li><li>not in</li></ul><h2 id="3、交并补"><a href="#3、交并补" class="headerlink" title="3、交并补"></a>3、交并补</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的交集、并集、差集、对称差运算</span></span><br><span class="line">print(set1 &amp; set2)</span><br><span class="line"><span class="comment"># print(set1.intersection(set2))</span></span><br><span class="line">print(set1 | set2)</span><br><span class="line"><span class="comment"># print(set1.union(set2))</span></span><br><span class="line">print(set1 - set2)</span><br><span class="line"><span class="comment"># print(set1.difference(set2))</span></span><br><span class="line">print(set1 ^ set2)</span><br><span class="line"><span class="comment"># print(set1.symmetric_difference(set2))</span></span><br><span class="line"><span class="comment"># 判断子集和超集</span></span><br><span class="line">print(set2 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set2.issubset(set1))</span></span><br><span class="line">print(set3 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set3.issubset(set1))</span></span><br><span class="line">print(set1 &gt;= set2)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set2))</span></span><br><span class="line">print(set1 &gt;= set3)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set3))</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于上次的&lt;strong&gt;列表&lt;/strong&gt;和&lt;strong&gt;元组&lt;/strong&gt;，这次总结&lt;strong&gt;字典&lt;/strong&gt;和&lt;strong&gt;集合&lt;/strong&gt;的基本操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://iceWind-R.github.io/categories/Python/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Python" scheme="http://iceWind-R.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建总结（二）</title>
    <link href="http://icewind-r.github.io/2020/06/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://icewind-r.github.io/2020/06/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-06-21T12:41:08.000Z</published>
    <updated>2020-06-22T04:36:31.841Z</updated>
    
    <content type="html"><![CDATA[<p>前文已经利用GitHub搭建了基本的博客， 此篇总结一些服务器，Linux的知识点，为之后的部署到服务器做好准备。</p><a id="more"></a><hr><p>1、静态博客：hexo,hugo等框架搭建起来的博客，内部生成固定的html页面代码，每个人访问的内容都完全一致。</p><p>2、动态博客：wordpress，halo，有着后台应用服务的博客，需要单独应用服务器的承载，比如登录功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前文已经利用GitHub搭建了基本的博客， 此篇总结一些服务器，Linux的知识点，为之后的部署到服务器做好准备。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HEXO" scheme="http://iceWind-R.github.io/categories/HEXO/"/>
    
    
      <category term="experience" scheme="http://iceWind-R.github.io/tags/experience/"/>
    
      <category term="blog" scheme="http://iceWind-R.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Plan_01（6.21~6.28）</title>
    <link href="http://icewind-r.github.io/2020/06/21/Plan-01-%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <id>http://icewind-r.github.io/2020/06/21/Plan-01-%E7%AC%AC%E4%B8%80%E5%91%A8/</id>
    <published>2020-06-21T10:47:02.000Z</published>
    <updated>2020-06-27T09:14:31.712Z</updated>
    
    <content type="html"><![CDATA[<p>这是暑假的第一周，务必不要拖延，每天进步一点。</p><a id="more"></a><hr><p><strong>整体计划：</strong></p><ol><li>python</li><li>Android</li><li>服务器</li><li>英语</li><li>阅读</li><li>知乎收藏</li></ol><p><strong>周一（6.22）计划</strong></p><p>四个服务器的视频看完，服务器搭建博客完成</p><p>python第七天视频学习完成</p><p><strong>本周知乎总结：</strong></p><ol><li><strong>为人处世</strong><ol><li>不要让自己每天的时间分散，碎片化是效率的生死大敌，少刷朋友圈，少水群，因为这只会浪费你的时间。</li><li>改变自己最高效的方法，就是去做你害怕的事，不作为比失败更可怕。</li><li>能定期和父母联系是一项很棒的能力。</li><li>不喜欢当下的工作，马上换，每拖一分你勇气就少一分。你多学一点本事，将来就能少开口求人一次。</li><li>学会果断拒绝，而不是犹豫后拒绝。</li><li>最短的距离是从嘴到手，最长的距离是从说到做。</li></ol></li><li><strong>大学学习</strong><ol><li>你花大量时间，重复着最容易的环节。</li></ol></li><li></li></ol><p><strong>人是怎么废掉的？</strong></p><ol><li><p><strong>沉溺于「轻易获得高成就感」的事情</strong>：有意无意地寻求用很小付出获得很大「回报」的偏方，哪怕回报是虚拟的。这种行为会提升自己的「兴奋阈值」，让人越来越不容易拥有成就感，从而越来越依赖虚拟的成就感，陷入恶性循环。症状轻的：<strong>沉溺游戏</strong>（在虚拟世界中加快时间流逝的速度，使得「成功」来得更快）、<strong>种马小说</strong>（意淫人能轻易获得想要的东西）；症状重甚至犯法的：<strong>赌博</strong>（轻易获得「金钱」）、<strong>吸毒</strong>（轻易获得「爽」的感觉）等。</p></li><li><p><strong>只接收「低信息密度」的信息源</strong>：只愿意接收信息密度低的信息（如无需太多动脑的视频、图片，以及深度较浅的娱乐、八卦、体育新闻等），不愿意接收信息密度高、需要思考后才能吸收的信息（如课程、知识框架、分析报告等）。由于真正有价值、能让人进步的信息大多是需要思考和消化的，所以如果完全隔离了这部分内容，基本也就隔离了进步的可能。</p></li><li><p><strong>习惯用「错位成就感」麻痹自己</strong>：有两类：① 习惯于拿自己擅长的东西和别人不擅长的东西比较，从来获得「比别人强」的错觉（如：和运动员比学习成绩，和学霸比体育）；② 习惯于拿别人做事情 A 的时间来做事情 B，来假装自己在事情 B 上做得好（如：「炫耀」自己在节假日做了比别人更多的工作，但也仅仅是在节假日才能如此）。</p></li><li><p><strong>过度依赖「既有可行路径」</strong>：在工作中，习惯了一件事情的流程后再也没想过如何改进，只会机械地重复，然后骗自己很充实。没有改进，便也没有剔除糟粕的意识，于是需要重复的东西越来越多，消耗时间也越来越长，到最后，看上去每天做了很多事情，但其实不仅一点进步都没有，还挤占了进步的空间。</p></li><li><p><strong>封闭「强化学习」的通道</strong>：在学习或接受信息中，只愿意执行最简单的第一步，却不愿意执行接下来更为复杂的巩固和应用流程，只听不说、只看不写、只学不练，还麻痹自己说学到了很多东西，而实际上，这种「浅层」的学习遗忘极快，有时还不如不学。比如，天天学英语，却从不写英语文章；再比如，天天花大量时间刷知乎，却从不写答案、写总结。</p></li></ol><p><strong>等自己变优秀了再去追女生还来得及吗</strong>？</p><p>1、喜欢就去追求，如果没有自信就放弃，不要在模糊状态长期停留，这是你生命的癌细胞，对生命的质量没有任何意义。</p><p>2、要么去恋爱，要么勇敢的面对失恋的痛苦，这本身就是勇气。</p><p>3、女孩子去买新衣服，买化妆品，花无数的时间去梳妆打扮，是希望自己讨人喜欢。你要明白这一点，并不存在没有缺点的女神。</p><p>4、能够吸引你的是一种类型的女孩子，如果你征服不了其中一个，那就换一个，这才是正常状态。你要拥有能够整理自己心理的能力，这是一个成年人成熟的标准。</p><p>5、即便你做不到去追求她，但也做不到去忘记她。你起码应该做到的是，不要因为她浪费了你过度的时间和精力，还有资源。然后时间会帮助你解决问题。不是每个女人都是善良的，不要给她养备胎的机会。</p><p>6、只有你去追求，去接触，你们才有真实的互相了解的可能，或许她只是绣花枕头，你接触一段时间就不喜欢了，这时候你是不是会觉得长时间的无理由的暗恋很傻呢？</p><p>7、你可以没有自信，没有勇气，毕竟这是一个进步的过程。但如果你没有常识，那很可能你会失去对自己的主导权。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是暑假的第一周，务必不要拖延，每天进步一点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Plan" scheme="http://iceWind-R.github.io/categories/Plan/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>没来得及好好过的大二</title>
    <link href="http://icewind-r.github.io/2020/06/17/%E6%B2%A1%E6%9D%A5%E5%BE%97%E5%8F%8A%E5%A5%BD%E5%A5%BD%E8%BF%87%E7%9A%84%E5%A4%A7%E4%BA%8C/"/>
    <id>http://icewind-r.github.io/2020/06/17/%E6%B2%A1%E6%9D%A5%E5%BE%97%E5%8F%8A%E5%A5%BD%E5%A5%BD%E8%BF%87%E7%9A%84%E5%A4%A7%E4%BA%8C/</id>
    <published>2020-06-17T02:56:38.000Z</published>
    <updated>2020-06-17T03:20:15.586Z</updated>
    
    <content type="html"><![CDATA[<p>转瞬即逝。</p><a id="more"></a><hr><p>结束才觉得一切都太快了</p><p>得好好规划暑假啊</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转瞬即逝。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://iceWind-R.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>男儿有泪不轻弹？</title>
    <link href="http://icewind-r.github.io/2020/05/13/%E7%94%B7%E5%84%BF%E6%9C%89%E6%B3%AA%E4%B8%8D%E8%BD%BB%E5%BC%B9%EF%BC%9F/"/>
    <id>http://icewind-r.github.io/2020/05/13/%E7%94%B7%E5%84%BF%E6%9C%89%E6%B3%AA%E4%B8%8D%E8%BD%BB%E5%BC%B9%EF%BC%9F/</id>
    <published>2020-05-13T12:11:37.000Z</published>
    <updated>2020-05-13T12:26:14.835Z</updated>
    
    <content type="html"><![CDATA[<p> 你记得你上一次为什么而落泪吗？</p><a id="more"></a><hr><p>5.13 晚20：00</p><p>已不记得上次为什么而落泪，可能还是童年时和父母的一次赌气？和同学的一场争执？</p><p>十多年过去，即将20岁的我，却再一次落泪</p><p>我承认我的懦弱，但这次，我觉得不一样</p><p>真的没想到和父母的代沟能有这么大</p><p>第一次感受到心痛掩盖了身体的痛</p><p>家真的是游子的港湾吗？</p><p>可能是地理上的港湾，可能是身体上的给我丰衣足食的港湾</p><p>却再也难已是我心灵的港湾了</p><p>这次不为任何而哭</p><p>只是为自己的孤独而哭</p><p>更为自己的无能而哭</p><p>或许，这就是庸人最后的挣扎了吧</p><p>但毕竟心有不甘</p><p>那就继续挣扎吧</p><p>起码感动自己</p><p>你说，是吧？</p><br><p>哦对，今天崴脚了，打球这几年的第一次，得好好休养几天了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 你记得你上一次为什么而落泪吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://iceWind-R.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>闺女开学有感</title>
    <link href="http://icewind-r.github.io/2020/05/05/%E9%97%BA%E5%A5%B3%E5%BC%80%E5%AD%A6%E6%9C%89%E6%84%9F/"/>
    <id>http://icewind-r.github.io/2020/05/05/%E9%97%BA%E5%A5%B3%E5%BC%80%E5%AD%A6%E6%9C%89%E6%84%9F/</id>
    <published>2020-05-05T02:15:11.000Z</published>
    <updated>2020-05-05T14:43:40.480Z</updated>
    
    <content type="html"><![CDATA[<p>如题</p><a id="more"></a><hr><p>时间过得很快，认识的两个月已经流逝，相信这最后的两个月也不会让我等太久。</p><p>这次分离，只能高考后再见，下次相见就长大了啊。</p><p>第一次开始在乎QQ的小标识。</p><p>是啊，真的挺悲伤</p><br><p>时间就是这样</p><p>又想留住 又想度过</p><br><p>相信结果一定不会差</p><br><p>我期待着</p><p>高考结束的那一天</p><p>成绩下来的那一天</p><p>报考志愿的那一天</p><p>收到录取通知书的那一天</p><p>步入大学的那一天</p><br><p>相信一切都是上天最好的安排</p><br><img src="/2020/05/05/%E9%97%BA%E5%A5%B3%E5%BC%80%E5%AD%A6%E6%9C%89%E6%84%9F/1.PNG">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://iceWind-R.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>电脑系统重装前的准备工作</title>
    <link href="http://icewind-r.github.io/2020/05/03/%E7%94%B5%E8%84%91%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>http://icewind-r.github.io/2020/05/03/%E7%94%B5%E8%84%91%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</id>
    <published>2020-05-03T07:12:07.000Z</published>
    <updated>2020-05-26T00:50:56.538Z</updated>
    
    <content type="html"><![CDATA[<p>总结下次电脑系统重装需要的环境软件和操作。</p><a id="more"></a><hr><h2 id="电脑初始化前的操作"><a href="#电脑初始化前的操作" class="headerlink" title="电脑初始化前的操作"></a>电脑初始化前的操作</h2><p>不能着急，需要把电脑中的资料提前保存，预计是百度网盘，记得开会员。要保存的资料有：</p><ul><li>MyBlog</li><li>每个编译器存放的代码</li><li>Wallpaper Engine下的壁纸</li><li>下载的音乐</li><li>D盘下的小工具</li><li>谷歌浏览助手</li><li>额滴小心肝</li><li>chrome中Tempermonkey的插件</li></ul><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><p>首先是要给系统的磁盘分好类。</p><ol><li>D盘（软件盘）：一级目录为application、server、MyBlog。（把download文件夹移到E盘）</li><li>E盘（文档盘）：包括学习资料、我的工具，同时把桌面、document等等移到此盘下（先建一个大文件夹（我的文件：注意，文件名换个英文的），然后把每一项移动进来）。</li><li>F盘（游戏盘）：每个公司一个文件夹。Steam，Wegame，uplay等。</li></ol><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Java、PHP（php_study）</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="学习类"><a href="#学习类" class="headerlink" title="学习类"></a>学习类</h3><h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><p>IDEA、PyCharm、PHPStorm、AS、CodeBlocks、Eclipse、VS、VSCode</p><p>（与Github绑定）</p><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><p>HBulider、Notepad++、Sublime Text</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>MySQL、Redis、SQL server、Navicat For MySQL、SQLiteStudio</p><p>php_study中有MySQL，了解后使用</p><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><p>VM、Genymotion</p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>Xftp、Xshell</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>MatLab、RegexBuddy、Cisco Packet Tracer</p><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p>chrome、Firefox</p><p>WPS、Everything、印象笔记、bandzip、欧路翻译、</p><p>Iris（护眼）、百度网盘（使用微信登录）、</p><p>格式工厂、PS，PR、ScreenToGif、达芬奇、PotPlayer（百度网盘中下载，<a href="https://www.zhihu.com/question/20710497/answer/1076773103" target="_blank" rel="noopener">如何使用</a>）、小蝴蝶</p><h3 id="娱乐类"><a href="#娱乐类" class="headerlink" title="娱乐类"></a>娱乐类</h3><p>微信、TIM、QQ、网易云音乐、腾讯视频、</p><p>网易加速、雷神加速、Steam、WeGame、暴雪战网、Epic</p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>VM中建立自己的Linux系统。</p><p>tomcat、</p><p>apache、MySQL、phpMyadmin、PHP等由phpstudy提供</p><p>配置虚拟主机</p><p>Maven的安装和IDEA中Maven的配置</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结下次电脑系统重装需要的环境软件和操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://iceWind-R.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>PHP——数据库MySQL操作</title>
    <link href="http://icewind-r.github.io/2020/04/29/PHP%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E6%93%8D%E4%BD%9C/"/>
    <id>http://icewind-r.github.io/2020/04/29/PHP%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-29T13:18:52.000Z</published>
    <updated>2020-05-02T07:17:00.320Z</updated>
    
    <content type="html"><![CDATA[<p>总结PHP中操作MySQL的相关方法与命令。</p><a id="more"></a><hr><h2 id="PHP连接MySQL"><a href="#PHP连接MySQL" class="headerlink" title="PHP连接MySQL"></a>PHP连接MySQL</h2><h3 id="PHP连接MySQL服务器"><a href="#PHP连接MySQL服务器" class="headerlink" title="PHP连接MySQL服务器"></a>PHP连接MySQL服务器</h3><h4 id="mysqli-connect"><a href="#mysqli-connect" class="headerlink" title="mysqli_connect()"></a>mysqli_connect()</h4><ul><li><p>描述：连接到MySQL服务器</p></li><li><p>语法：<code>$link = mysqli_connect([host],[username],[password],[dbName],[port])</code></p></li><li><p>返回值：连接成功，则返回MySQLi连接对象。如果失败，则返回FALSE。</p></li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="@运算符"></a>@运算符</h4><ul><li>PHP支持错误抑制运算符@。</li><li>可以把它放在<strong>变量，函数、include调用</strong>和<strong>变量</strong>等前面。</li></ul><p>在连接数据库失败的时候，往往系统给出提示信息，会暴露电脑的相关配置，可能发生信息的不安全泄露，造成隐患。我们可以使用错误抑制符@来避免数据库连接失败的错误提示。</p><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$link = @ mysqli_connect([host],[username],[password],[dbName],[port]);</span><br></pre></td></tr></table></figure><h4 id="die-和exit"><a href="#die-和exit" class="headerlink" title="die()和exit()"></a>die()和exit()</h4><ul><li>输出一个消息并且退出当前脚本，作用等同。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$db_host = <span class="string">"localhost"</span>;<span class="comment">//主机号</span></span><br><span class="line">$db_port = <span class="string">"3306"</span>;   <span class="comment">//端口号</span></span><br><span class="line">$db_user = <span class="string">"root"</span>;   <span class="comment">//用户名</span></span><br><span class="line">$db_password = <span class="string">"root"</span>; <span class="comment">//密码</span></span><br><span class="line">$db_name = <span class="string">"mydb"</span>;   <span class="comment">//数据库名</span></span><br><span class="line">$charset = <span class="string">"utf8"</span>;   <span class="comment">//字符集</span></span><br><span class="line"><span class="keyword">if</span>(!$link = @ mysqli_connect($db_host.<span class="string">":"</span>.$db_port,$db_user,$db_password))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败"</span>);<span class="comment">//中止程序向下运行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mysqli-connect-error"><a href="#mysqli-connect-error" class="headerlink" title="mysqli_connect_error()"></a>mysqli_connect_error()</h4><ul><li>返回连接失败的错误信息。</li></ul><h4 id="mysqli-close"><a href="#mysqli-close" class="headerlink" title="mysqli_close()"></a>mysqli_close()</h4><ul><li>关闭先前打开的数据库连接</li><li>语法：<code>bool mysqli_close(mysqli $link);</code></li></ul><h3 id="选择当前数据库"><a href="#选择当前数据库" class="headerlink" title="选择当前数据库"></a>选择当前数据库</h3><p>一个数据库服务器包含很多的数据库，通常需要针对某个具体的数据库操作。</p><p>语法：bool mysqli_select_db(mysqli $link,string $database)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!mysqli_select_db($link,$database))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"选择数据库$&#123;db_name&#125;失败"</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置客户端字符集"><a href="#设置客户端字符集" class="headerlink" title="设置客户端字符集"></a>设置客户端字符集</h3><p>设置默认字符编码</p><p>语法：<code>bool mysqli_set_charset(mysqli $link,string $ charset)</code></p><h2 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h2><h4 id="mysqli-query"><a href="#mysqli-query" class="headerlink" title="mysqli_query()"></a>mysqli_query()</h4><ul><li>发送一条MySQL查询</li><li>语法：<code>resource mysqli_query(mysqli $link,string $query)</code></li><li>$query是查询的sql语句字符串</li></ul><p><strong>说明：</strong>mysqli_query()仅对SELECT，SHOW 或 DESCRIBE 语句返回一个mysqli_result结果集对象，如果查询不正确返回FALSE。对于其他类型的SQL语句，成功返回TRUE，失败返回FALSE。非FALSE的返回值意味着查询是合法的并能够被服务器执行。</p><p><strong>注意</strong>：查询字符串不应以分号结束，和命令行模式下有区别。</p><p>mysqli_result结果集对象：结果已经查到，但必须用特殊的方法才能取出数据。</p><h4 id="mysqli-free-result"><a href="#mysqli-free-result" class="headerlink" title="mysqli_free_result()"></a>mysqli_free_result()</h4><ul><li>释放与结果集相关联的内存</li><li>语法：<code>void mysqli_free_result(mysqli_result $result)</code></li></ul><p><strong>注意</strong>：是结果集对象mysqli_result，而不是bool。</p><h3 id="从结果集获取数据"><a href="#从结果集获取数据" class="headerlink" title="从结果集获取数据"></a>从结果集获取数据</h3><h4 id="mysqli-fetch-row"><a href="#mysqli-fetch-row" class="headerlink" title="mysqli_fetch_row()"></a>mysqli_fetch_row()</h4><ul><li><p>从结果集中取出一行作为枚举数组（下标为整型的是枚举数组，下标为字符串的是关联数组）</p></li><li><p>array mysqli_fetch_row(mysqli_result $result)</p></li><li><p>每调用一次，取出当前行，并把指针指向下一行，下次调用便是下一行的数据。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>($arr = mysqli_fetch_row($result))&#123;</span><br><span class="line">    print_r($arr);<span class="comment">//取出所有数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mysqli-fetch-assoc"><a href="#mysqli-fetch-assoc" class="headerlink" title="mysqli_fetch_assoc()"></a>mysqli_fetch_assoc()</h4><ul><li><p>从结果集中取出一行作为关联数组</p></li><li><p>语法：<code>array mysqli_fetch_assoc(mysqli_result $result)</code></p></li><li><p>从结果集取得的行生成的关联数组，如果没有更多行则返回FALSE。</p></li></ul><p><strong>注意</strong>：此函数返回的字段名大小写敏感。</p><h4 id="mysqli-fetch-array"><a href="#mysqli-fetch-array" class="headerlink" title="mysqli_fetch_array()"></a>mysqli_fetch_array()</h4><ul><li><p>从结果集中取出一行作为关联数组或数字数组，或二者兼有。</p></li><li><p>语法：<code>array mysqli_fetch_array(mysqli_result $result [,int $result_type = MYSQLI_BOTH])</code></p></li><li><p>$result_type是一个常量，取值：MYSQLI_BOTH （二者兼有，默认），MYSQLI_ASSOC （关联索引），MYSQLI_NUM（数字索引） </p></li><li><p>从结果集取得的行生成的数组，如果没有更多行则返回FALSE。</p></li></ul><p><strong>注意</strong>：此函数返回的字段名大小写敏感。</p><p>二者兼有<strong>举例</strong>（一份数据在数组中存两遍，一遍枚举数组，一遍关联数组）：</p><img src="/2020/04/29/PHP%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E6%93%8D%E4%BD%9C/1.png" class><h4 id="mysqli-fetch-all"><a href="#mysqli-fetch-all" class="headerlink" title="mysqli_fetch_all()"></a>mysqli_fetch_all()</h4><p>从结果集中取出所有行作为关联数组、枚举数组或二者兼有。</p><p>语法：<code>mixed mysqli_fetch_all(mysqli_result $result [,int $result_type = MYSQLI_NUM])</code></p><p>与之前不同的是，默认为枚举数组；即第一维永远为数字，表示第几条记录，第二维字段可以改变，数字、字符串或二者兼有。</p><h4 id="mysqli-error"><a href="#mysqli-error" class="headerlink" title="mysqli_error()"></a>mysqli_error()</h4><ul><li><p>显示执行sql语句失败的错误信息</p></li><li><p>语法：<code>mysqli_error(mysqli $link)</code></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"insert into test(id,name,age) values(null,'李四',25)"</span>;</span><br><span class="line">$result = mysqli_query($link,$sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"2、数据插入失败:"</span>.mysqli_error($link));</span><br></pre></td></tr></table></figure><h3 id="获取记录数"><a href="#获取记录数" class="headerlink" title="获取记录数"></a>获取记录数</h3><h4 id="mysqli-num-rows"><a href="#mysqli-num-rows" class="headerlink" title="mysqli_num_rows()"></a>mysqli_num_rows()</h4><p>取得结果集中行的数目</p><p>语法：<code>int mysqli_num_rows(mysqli_result $result)</code></p><p><strong>注意：</strong>此命令仅对SELECT语句有效。</p><h4 id="mysqli-affected-rows"><a href="#mysqli-affected-rows" class="headerlink" title="mysqli_affected_rows()"></a>mysqli_affected_rows()</h4><p>取得前一次MySQL操作所影响的记录行数，包括SELECT,UPDATE,INSERT或DELETE。</p><p>语法：<code>int mysqli_affected_rows(mysqli $link)</code></p><p><strong>注意：</strong>如果最近一次查询失败，函数返回-1。当使用UPDATE查询，MySQL不会将原值和新值一样的值更新，即此条记录不代表被修改。返回值不一定就是查询条件所符合的记录，只有修改过的记录数才会被返回。</p><p><strong>案例演示注意事项</strong></p><p>1、首先是表单的提交，在php中判断是否提交表单，可以在表单中设置隐藏域，值为一个随机值，判断这个随机且唯一的值是否正确即可判断表单是否提交，该方法可避免其他人提交表单修改自己数据库的不安全情况。</p><img src="/2020/04/29/PHP%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E6%93%8D%E4%BD%9C/2.png" class><p>2、然后是复选框的提交，复选框提交时会出现覆盖现象，此时在name属性后添加<code>[]</code>来表明该属性为数组属性。</p><p>PHP会把<code>name=&quot;hobby[]&quot;</code>看成添加一个数组元素，而HTML会把它看成一个字符串。</p><img src="/2020/04/29/PHP%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E6%93%8D%E4%BD%9C/3.png" class><p><strong>提示：</strong>将多个爱好连成一个值，并写入到数据库某个字段中，只需要一个字段来存储爱好，用到字符串的拼接。</p><img src="/2020/04/29/PHP%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E6%93%8D%E4%BD%9C/4.png" class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结PHP中操作MySQL的相关方法与命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://iceWind-R.github.io/categories/PHP/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="PHP" scheme="http://iceWind-R.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>十天时光荒废总结</title>
    <link href="http://icewind-r.github.io/2020/04/16/%E5%8D%81%E5%A4%A9%E6%97%B6%E5%85%89%E8%8D%92%E5%BA%9F%E6%80%BB%E7%BB%93/"/>
    <id>http://icewind-r.github.io/2020/04/16/%E5%8D%81%E5%A4%A9%E6%97%B6%E5%85%89%E8%8D%92%E5%BA%9F%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-16T14:07:24.000Z</published>
    <updated>2020-04-17T12:22:43.253Z</updated>
    
    <content type="html"><![CDATA[<p>十天时光已然逝去，但万事有弊就有利，相信浪费的时光也有其宝贵的价值。</p><a id="more"></a><hr><p>这十天真是浑浑噩噩的十天，难以想象，现在回头看看，竟不能细想出干了些什么事，怕是每天都是重复，毫无收获吧。</p><p>十天状态：</p><p>1、课不好好上，就是不听，玩手机，心安理得，不像以前带着愧疚感玩。</p><p>2、没有上进，毫无作为，什么都不想干。</p><p>3、混吃等死？破罐子破摔？真是可怕。</p><p>4、张武？每天就是这么没的。</p><p>真的觉得世界都黑暗了，不知道该干什么，什么都干不好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;十天时光已然逝去，但万事有弊就有利，相信浪费的时光也有其宝贵的价值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reinvent" scheme="http://iceWind-R.github.io/categories/Reinvent/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack架构组件（一）</title>
    <link href="http://icewind-r.github.io/2020/04/05/Android-1/"/>
    <id>http://icewind-r.github.io/2020/04/05/Android-1/</id>
    <published>2020-04-05T11:09:58.000Z</published>
    <updated>2020-04-07T04:39:58.174Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习Android Jetpack相关知识。</p><a id="more"></a><hr><p>首先补充一点内容。</p><h3 id="设置app的横屏和竖屏"><a href="#设置app的横屏和竖屏" class="headerlink" title="设置app的横屏和竖屏"></a>设置app的横屏和竖屏</h3><p>设置app某个界面的横屏和竖屏的不同显示方式。</p><img src="/2020/04/05/Android-1/1.png" class><p>即可创建当前页面的一个横屏副本。</p><p>app页面的横屏和竖屏转换是一个Activity的杀死重创建的过程，即界面被刷新，如果当前界面的数据没保存，则会丢失。</p><p>如果需要临时保存当前页面的数据，使其在反转后数据不丢失，则需要以下操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先注意onCreate(Bundle savedInstanceState)的参数，为保存当前页面的临时数据，Bundle类为key:value形式。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        button = findViewById(R.id.button);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String s = savedInstanceState.getString(<span class="string">"KEY"</span>);</span><br><span class="line">            textView.setText(s);</span><br><span class="line">        &#125;</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                textView.setText(R.string.button);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">        outState.putString(<span class="string">"KEY"</span>, textView.getText().toString());<span class="comment">//存入Bundle对象，便于onCreate方法取出</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Android-Jetpack"><a href="#Android-Jetpack" class="headerlink" title="Android Jetpack"></a>Android Jetpack</h2><img src="/2020/04/05/Android-1/2.png" class><p><strong>ViewModel</strong>：对象为特定的界面组件（如 Fragment 或 Activity）提供数据，并包含数据处理业务逻辑，以与模型进行通信。例如，ViewModel 可以调用其他组件来加载数据，还可以转发用户请求来修改数据。ViewModel 不了解界面组件，因此不受配置更改（如在旋转设备时重新创建 Activity）的影响。</p><p><strong>LiveData</strong>：是一种可观察的数据存储器。应用中的其他组件可以使用此存储器监控对象的更改，而无需在它们之间创建明确且严格的依赖路径。LiveData 组件还遵循应用组件（如 Activity、Fragment 和 Service）的生命周期状态，并包括清理逻辑以防止对象泄漏和过多的内存消耗。</p><p><strong>DataBinding</strong>：声明性地将可观察数据绑定到UI元素，其目的在于是为了脱离Controller与View之间的引用联系，很类似Butterknife库，使用也比较相似。</p><p><strong>Navigation</strong>：允许用户在应用程序中浏览、进入和退出不同内容的Fragment。Navigation能够实现从简单的按钮单击到更复杂的模式，如应用程序栏和导航抽屉。导航组件还通过遵循一套既定的原则来确保一致和可预测的用户体验。</p><p><strong>Lifecycles</strong>：Lifecycles是一个生命周期感知组件，当Activity或者Fragment的生命周期发生改变的时会，Lifecycles也会做出相应的生命周期状态的改变，它保存关于组件生命周期状态的信息(比如活动或片段)，并允许其他对象观察这种状态。</p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a><strong>ViewModel</strong></h3><p>刚入门，做了一个简短的案例，通过ViewModel管理UI产生的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个按钮，实现+1，+2操作</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//用的是ViewModelProviders，可能需要引入Gradle配置</span></span><br><span class="line">        myVideModel = ViewModelProviders.of(<span class="keyword">this</span>).get(MyVideModel<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//创建ViewModel对象</span></span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        textView.setText(String.valueOf(myVideModel.num));</span><br><span class="line">        button1 = findViewById(R.id.button);</span><br><span class="line">        button2 = findViewById(R.id.button2);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                myVideModel.num ++;</span><br><span class="line">                textView.setText(String.valueOf(myVideModel.num));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        button2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                myVideModel.num += <span class="number">2</span>;</span><br><span class="line">                textView.setText(String.valueOf(myVideModel.num));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//MyVideModel自定义的ViewModel类，需要继承自ViewModel类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVideModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewModel的出现主要为了解决两个问题：<br>1.当Actvitiy销毁重建过程中的数据恢复问题，虽然原来可以使用<code>onSaveInstanceState()</code>来完成，但是只支持能被序列化的数据而且是小量数据，对于大量数据则显得有点无力。<br>2.UI控制器的工作繁忙，UI控制器主要用于处理显示，交互，其他的额外操作可以委托给其他类完成，将不应该分配给UI的任务分离出来是必要的。</p><h3 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h3><img src="/2020/04/05/Android-1/3.png" class><p>LiveData是配合ViewModel使用的</p><p><strong>案例：</strong>实现一个点赞和踩的统计功能</p><p>ViewModelWithLiveData.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.livedata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.MutableLiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelWithLiveData</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Integer&gt; LikedNumber;<span class="comment">//创建LiveData的方式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getLikedNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LikedNumber == <span class="keyword">null</span>)&#123;</span><br><span class="line">            LikedNumber = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">            LikedNumber.setValue(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LikedNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLikedNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        LikedNumber.setValue(LikedNumber.getValue() + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thorine.livedata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.Observer;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ViewModelWithLiveData viewModelWithLiveData;</span><br><span class="line">    TextView textView;</span><br><span class="line">    ImageButton imageButtonLike , imageButtonDislike;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        textView = findViewById(R.id.textView);</span><br><span class="line">        imageButtonLike = findViewById(R.id.imageButton);</span><br><span class="line">        imageButtonDislike = findViewById(R.id.imageButton2);</span><br><span class="line"></span><br><span class="line">        viewModelWithLiveData = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(ViewModelWithLiveData<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        viewModelWithLiveData.getLikedNumber().observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                textView.setText(String.valueOf(integer));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        imageButtonLike.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                viewModelWithLiveData.addLikedNumber(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        imageButtonDislike.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                viewModelWithLiveData.addLikedNumber(-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端</p><img src="/2020/04/05/Android-1/4.png" class><p>并使用了Android Studio中基本的矢量图创建方法。</p><img src="/2020/04/05/Android-1/5.png" class><h3 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h3><p>1、首先需要在gradle中添加DataBinding依赖，具体做法，在defaultConfig下添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataBinding &#123;</span><br><span class="line">            enabled <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2、在xml布局中引入DataBinding，点击首行代码的小灯泡即可。</p><p>3、在MainActivity.java中修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setContentView(R.layout.activity_main);</span></span><br><span class="line">binding = DataBindingUtil.setContentView(<span class="keyword">this</span>,R.layout.activity_main);</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binding.setData(myViewModel);</span><br><span class="line">binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>4、xml布局文件的<code>&lt;data&gt;</code>中添加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt;</span><br><span class="line">&lt;variable</span><br><span class="line">name=<span class="string">"data"</span></span><br><span class="line">type=<span class="string">"com.thorine.databinding.MyViewModel"</span> /&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>textView中获取数值：<code>android:text=&quot;@{String.valueOf(data.number)}&quot;</code></p><p>Button中绑定监听事件：<code>android:onClick=&quot;@{()-&gt;data.add()}&quot;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始学习Android Jetpack相关知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://iceWind-R.github.io/categories/Android/"/>
    
    
      <category term="Learning" scheme="http://iceWind-R.github.io/tags/Learning/"/>
    
      <category term="Android" scheme="http://iceWind-R.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>自我改造计划（综述）</title>
    <link href="http://icewind-r.github.io/2020/04/04/%E8%87%AA%E6%88%91%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92%EF%BC%88%E7%BB%BC%E8%BF%B0%EF%BC%89/"/>
    <id>http://icewind-r.github.io/2020/04/04/%E8%87%AA%E6%88%91%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92%EF%BC%88%E7%BB%BC%E8%BF%B0%EF%BC%89/</id>
    <published>2020-04-04T07:33:27.000Z</published>
    <updated>2020-04-04T10:25:04.485Z</updated>
    
    <content type="html"><![CDATA[<p>希望自己不再堕落，每天都有一点收获。</p><p>全文主旨：<strong>戒掉手机</strong>。</p><a id="more"></a><hr><p>每天什么都不想做，只想躺着呆着玩手机？</p><h2 id="提前透支自己的人生，体会过后的空虚"><a href="#提前透支自己的人生，体会过后的空虚" class="headerlink" title="提前透支自己的人生，体会过后的空虚"></a>提前透支自己的人生，体会过后的空虚</h2><blockquote><p>“大半的人在二十岁或三十岁上就死了。一过这个年龄，他们只变了自己的影子。以后的生命不过是用来模仿自己，把以前真正有人味儿的时代所说的，所做的，所想的，所喜欢的，一天天的重复，而且重复的方式越来越机械，越来越脱腔走板。”——《约翰·克里斯多夫》罗曼·罗兰</p></blockquote><h2 id="注意力被过度消散后的不专注"><a href="#注意力被过度消散后的不专注" class="headerlink" title="注意力被过度消散后的不专注"></a>注意力被过度消散后的不专注</h2><p>信息泛滥让人的专注度下降，但真正能够让你的大脑汲取到营养的，都是需要高度且长时间专注的事，比如读书。</p><p>一个简单的问题：<strong>你多久没有安下心来，好好的读一本书了？</strong></p><p>尝试先从简单的事情做起，比如听一听TED一些心理篇的演讲。</p><h2 id="快感刺激阈值被提高后的慵懒"><a href="#快感刺激阈值被提高后的慵懒" class="headerlink" title="快感刺激阈值被提高后的慵懒"></a>快感刺激阈值被提高后的慵懒</h2><p>我们用手机逃避自己的现状，我们也在利用玩手机来拖延、逃避眼前待解决的问题。</p><p>玩手机来饮鸠止渴，回光返照，越是Deadline，越玩的疯狂，恶性循环。</p><h2 id="耐心点去感受不同阶段的人生体会"><a href="#耐心点去感受不同阶段的人生体会" class="headerlink" title="耐心点去感受不同阶段的人生体会"></a>耐心点去感受不同阶段的人生体会</h2><p>短暂地关闭外界感知通道，离开手机，反而有助于你的思维变得更清晰，更透彻。</p><p>​    而且啊，其实你即使不去关注那些，也没什么影响的。</p><p>​    就算你每隔五秒打开一次微信，没事找你的人还是不会找你。</p><p>​    就算你每天都能刷出瀑布般的信息流，和你无关的事还是和你无关。</p><img src="/2020/04/04/%E8%87%AA%E6%88%91%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92%EF%BC%88%E7%BB%BC%E8%BF%B0%EF%BC%89/1.jpg" class><h2 id="直面空虚和抑郁，借助它们反思"><a href="#直面空虚和抑郁，借助它们反思" class="headerlink" title="直面空虚和抑郁，借助它们反思"></a>直面空虚和抑郁，借助它们反思</h2><blockquote><p>为什么别人能做好的事情我做不好？</p><p>为什么别人跟着建民慢慢成长，我却连队伍都跟不上？</p></blockquote><p>人只有在抑郁的时候，才愿意思考。</p><p>是真的，先借助负面情绪，才能摆脱掉负面情绪。</p><h2 id="逼自己去做点慢节奏的事"><a href="#逼自己去做点慢节奏的事" class="headerlink" title="逼自己去做点慢节奏的事"></a>逼自己去做点慢节奏的事</h2><p>不要觉得发呆是浪费时间，也不要觉得停下来就是不思进取。</p><p>很多时候，停下来，等一等，看看四周，反思下过往，思考下未来，你会有很多错过的新发现。</p><p>一个小时也没看进去两页书，这没啥不好意思的。相比起自暴自弃刷手机，往大脑里塞一个小时的抖音神曲和情绪垃圾，对着书页放空大脑都要好很多。允许自己慢慢来，你迟早可以一个小时看五页、十页、二十页……</p><p>关键在于，屏蔽掉外界的信息，好好感受自己思维和注意力的游荡。前期你可以不过多干涉，就让自己静静的观察，并重新审视那些不断黏着你注意力的事物，再问问自己：“它配吗？”</p><p><strong>找回注意力，就是找回对时间的掌控感。</strong></p><p><strong>把步调调慢后，其实生活中那种“疲于奔命”的感觉也消失了。</strong></p><p>因为只有停下来，时间的流动才变得格外明显。只有慢慢来，时间的报答才有空酝酿成熟。</p><p>毕竟，很多名人的slogan都是：“做时间的朋友。”</p><p><strong>从今天起，每天做好属于自己的事情，总结记录，每天反思，望坚持。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;希望自己不再堕落，每天都有一点收获。&lt;/p&gt;
&lt;p&gt;全文主旨：&lt;strong&gt;戒掉手机&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reinvent" scheme="http://iceWind-R.github.io/categories/Reinvent/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>清明</title>
    <link href="http://icewind-r.github.io/2020/04/04/%E6%B8%85%E6%98%8E/"/>
    <id>http://icewind-r.github.io/2020/04/04/%E6%B8%85%E6%98%8E/</id>
    <published>2020-04-04T02:00:32.000Z</published>
    <updated>2020-04-04T08:02:35.541Z</updated>
    
    <content type="html"><![CDATA[<p>记录已经过完的四分之一个2020年。</p><a id="more"></a><hr><p>又是一个清明时节，但这次显然多了一层不一样的含义</p><p>宅家三月，似乎还没有做些什么，2020年就过了四分之一</p><p>但这更是与死神抢人的三个月，国内疫情稍稍好转，国外疫情却大行其道</p><p>我想过见证历史，但没想到，我会见证这样的历史</p><p>全国默哀，举国悼念</p><p>数不清的天使为我们保驾护航</p><p>那有什么英雄，不过只是在死神手里抢人的一个个普通人罢了</p><br><p>窗外狂风怒号</p><p>号笛拉响</p><p>天地动容</p><br><p>人类的赞歌是勇气的赞歌</p><p>人类的伟大是勇气的伟大</p><br><blockquote><p>愿逝者安息</p><p>愿生者奋发</p><p>愿祖国昌盛</p></blockquote><br><p>消逝的星星，你们永远在我心中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录已经过完的四分之一个2020年。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://iceWind-R.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="idea" scheme="http://iceWind-R.github.io/tags/idea/"/>
    
  </entry>
  
</feed>
